### YamlMime:UniversalReference
items:
  - uid: botbuilder-azure.AzureTableClient
    name: AzureTableClient
    fullName: AzureTableClient
    children:
      - botbuilder-azure.AzureTableClient.constructor
      - botbuilder-azure.AzureTableClient.initialize
      - botbuilder-azure.AzureTableClient.insertOrReplace
      - botbuilder-azure.AzureTableClient.retrieve
    langs:
      - typeScript
    type: class
    summary: ''
    package: botbuilder-azure
  - uid: botbuilder-azure.AzureTableClient.constructor
    name: 'AzureTableClient(string, string, string)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new instance of the AzureTableClient.
    syntax:
      content: >-
        new AzureTableClient(tableName: string, accountName?: string,
        accountKey?: string)
      parameters:
        - id: tableName
          type:
            - string
          description: ''
        - id: accountName
          type:
            - string
          description: ''
          optional: true
        - id: accountKey
          type:
            - string
          description: ''
          optional: true
    package: botbuilder-azure
  - uid: botbuilder-azure.AzureTableClient.initialize
    name: 'initialize((error: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Initializes the azure table client
    syntax:
      content: 'function initialize(callback: (error: Error) => void)'
      parameters:
        - id: callback
          type:
            - '(error: Error) => void'
          description: ''
    package: botbuilder-azure
  - uid: botbuilder-azure.AzureTableClient.insertOrReplace
    name: >-
      insertOrReplace(string, string, any, boolean, (error: Error, etag: any,
      response: IHttpResponse) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Inserts or replaces an entity in the table
    syntax:
      content: >-
        function insertOrReplace(partitionKey: string, rowKey: string, data:
        any, isCompressed: boolean, callback: (error: Error, etag: any,
        response: IHttpResponse) => void)
      parameters:
        - id: partitionKey
          type:
            - string
          description: ''
        - id: rowKey
          type:
            - string
          description: ''
        - id: data
          type:
            - any
          description: ''
        - id: isCompressed
          type:
            - boolean
          description: ''
        - id: callback
          type:
            - '(error: Error, etag: any, response: IHttpResponse) => void'
          description: ''
    package: botbuilder-azure
  - uid: botbuilder-azure.AzureTableClient.retrieve
    name: >-
      retrieve(string, string, (error: Error, entity: IBotEntity, response:
      IHttpResponse) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves an entity from the table
    syntax:
      content: >-
        function retrieve(partitionKey: string, rowKey: string, callback:
        (error: Error, entity: IBotEntity, response: IHttpResponse) => void)
      parameters:
        - id: partitionKey
          type:
            - string
          description: ''
        - id: rowKey
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              (error: Error, entity: IBotEntity, response: IHttpResponse) =>
              void
          description: ''
    package: botbuilder-azure
