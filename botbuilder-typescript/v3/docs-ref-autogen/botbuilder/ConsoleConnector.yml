### YamlMime:UniversalReference
items:
  - uid: botbuilder.ConsoleConnector
    name: ConsoleConnector
    fullName: ConsoleConnector
    children:
      - botbuilder.ConsoleConnector.listen
      - botbuilder.ConsoleConnector.onEvent
      - botbuilder.ConsoleConnector.onInvoke
      - botbuilder.ConsoleConnector.processEvent
      - botbuilder.ConsoleConnector.processMessage
      - botbuilder.ConsoleConnector.send
      - botbuilder.ConsoleConnector.startConversation
    langs:
      - typeScript
    type: class
    summary: Connects a UniversalBot to the command line via a console window.
    package: botbuilder
  - uid: botbuilder.ConsoleConnector.listen
    name: listen()
    children: []
    type: method
    langs:
      - typeScript
    summary: Starts the connector listening to stdIn.
    syntax:
      content: function listen()
      parameters: []
      return:
        type:
          - botbuilder.ConsoleConnector
        description: ''
    package: botbuilder
  - uid: botbuilder.ConsoleConnector.onEvent
    name: 'onEvent((events: IEvent[], callback?: (err: Error) => void) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called by the UniversalBot at registration time to register a handler for
      receiving incoming events from a channel.
    syntax:
      content: >-
        function onEvent(handler: (events: IEvent[], callback?: (err: Error) =>
        void) => void)
      parameters:
        - id: handler
          type:
            - '(events: IEvent[], callback?: (err: Error) => void) => void'
          description: ''
    package: botbuilder
  - uid: botbuilder.ConsoleConnector.onInvoke
    name: >-
      onInvoke((event: IEvent, cb?: (err: Error, body: any, status?: number) =>
      void) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Used to register a handler for receiving incoming invoke events.
    syntax:
      content: >-
        function onInvoke(handler: (event: IEvent, cb?: (err: Error, body: any,
        status?: number) => void) => void)
      parameters:
        - id: handler
          type:
            - >-
              (event: IEvent, cb?: (err: Error, body: any, status?: number) =>
              void) => void
          description: ''
    package: botbuilder
  - uid: botbuilder.ConsoleConnector.processEvent
    name: processEvent(IEvent)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a event through the connector.
    syntax:
      content: 'function processEvent(event: IEvent)'
      parameters:
        - id: event
          type:
            - botbuilder.IEvent
          description: ''
      return:
        type:
          - botbuilder.ConsoleConnector
        description: ''
    package: botbuilder
  - uid: botbuilder.ConsoleConnector.processMessage
    name: processMessage(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a message through the connector.
    syntax:
      content: 'function processMessage(line: string)'
      parameters:
        - id: line
          type:
            - string
          description: ''
      return:
        type:
          - botbuilder.ConsoleConnector
        description: ''
    package: botbuilder
  - uid: botbuilder.ConsoleConnector.send
    name: 'send(IMessage[], (err: Error, addresses?: IAddress[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Called by the UniversalBot to deliver outgoing messages to a user.
    syntax:
      content: >-
        function send(messages: IMessage[], callback: (err: Error, addresses?:
        IAddress[]) => void)
      parameters:
        - id: messages
          type:
            - 'botbuilder.IMessage[]'
          description: ''
        - id: callback
          type:
            - '(err: Error, addresses?: IAddress[]) => void'
          description: ''
    package: botbuilder
  - uid: botbuilder.ConsoleConnector.startConversation
    name: 'startConversation(IAddress, (err: Error, address?: IAddress) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called when a UniversalBot wants to start a new proactive conversation
      with a user. The connector should return a properly formated __address__
      object with a populated __conversation__ field.
    syntax:
      content: >-
        function startConversation(address: IAddress, callback: (err: Error,
        address?: IAddress) => void)
      parameters:
        - id: address
          type:
            - botbuilder.IAddress
          description: ''
        - id: callback
          type:
            - '(err: Error, address?: IAddress) => void'
          description: ''
    package: botbuilder
references:
  - uid: botbuilder.ConsoleConnector
    name: ConsoleConnector
    spec.typeScript:
      - name: ConsoleConnector
        fullName: ConsoleConnector
        uid: botbuilder.ConsoleConnector
  - uid: botbuilder.IEvent
    name: IEvent
    spec.typeScript:
      - name: IEvent
        fullName: IEvent
        uid: botbuilder.IEvent
  - uid: 'botbuilder.IMessage[]'
    name: 'IMessage[]'
    spec.typeScript:
      - name: IMessage
        fullName: IMessage
        uid: botbuilder.IMessage
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder.IAddress
    name: IAddress
    spec.typeScript:
      - name: IAddress
        fullName: IAddress
        uid: botbuilder.IAddress
