### YamlMime:UniversalReference
items:
  - uid: botbuilder.BotConnectorBot
    name: BotConnectorBot
    fullName: BotConnectorBot
    children:
      - botbuilder.BotConnectorBot.addDialogTrigger
      - botbuilder.BotConnectorBot.begin
      - botbuilder.BotConnectorBot.beginDialogAction
      - botbuilder.BotConnectorBot.cancelAction
      - botbuilder.BotConnectorBot.clone
      - botbuilder.BotConnectorBot.customAction
      - botbuilder.BotConnectorBot.dialogInterrupted
      - botbuilder.BotConnectorBot.dialogResumed
      - botbuilder.BotConnectorBot.endConversationAction
      - botbuilder.BotConnectorBot.findActionRoutes
      - botbuilder.BotConnectorBot.recognize
      - botbuilder.BotConnectorBot.reloadAction
      - botbuilder.BotConnectorBot.replyReceived
      - botbuilder.BotConnectorBot.selectActionRoute
      - botbuilder.BotConnectorBot.triggerAction
    langs:
      - typeScript
    type: class
    summary: >-
      __DEPRECATED__ use
      [UniversalBot](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.universalbot)
      and a
      [ChatConnector](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.chatconnector)
      instead.
    extends:
      name: botbuilder.Dialog
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.addDialogTrigger
    name: 'addDialogTrigger(ActionSet, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called once for each dialog within a library to give the dialog a chance
      to add its

      `triggerAction()` to the libraries global action set.  These triggers get
      mapped to

      a `beginDialogAction()` that starts the dialog when the trigger condition
      is met.
    syntax:
      content: 'function addDialogTrigger(actions: ActionSet, dialogId: string)'
      parameters:
        - id: actions
          type:
            - botbuilder.ActionSet
          description: Libraries global action set.
        - id: dialogId
          type:
            - string
          description: |
            The fully qualified ID of the dialog to trigger.
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.begin
    name: 'begin(Session, T)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Called when a new dialog session is being started.
    syntax:
      content: 'function begin<T>(session: Session, args?: T)'
      parameters:
        - id: session
          type:
            - botbuilder.Session
          description: Session object for the current conversation.
        - id: args
          type:
            - T
          description: |
            (Optional) arguments passed to the dialog by its parent.
          optional: true
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.beginDialogAction
    name: 'beginDialogAction(string, string, IBeginDialogActionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Binds an action to the dialog that will start another dialog anytime it's
      triggered. The new

      dialog will be pushed onto the stack so it does not automatically end the
      current task. The

      current task will be continued once the new dialog ends. The built-in
      prompts will automatically

      re-prompt the user once this happens but that behaviour can be disabled by
      setting the
      [promptAfterAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.ipromptoptions#promptafteraction)

      flag when calling a built-in prompt.
    syntax:
      content: >-
        function beginDialogAction(name: string, id: string, options?:
        IBeginDialogActionOptions)
      parameters:
        - id: name
          type:
            - string
          description: Unique name to assign the action.
        - id: id
          type:
            - string
          description: ID of the dialog to start.
        - id: options
          type:
            - botbuilder.IBeginDialogActionOptions
          description: >
            (Optional) options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action,
            otherwise the action needs to be bound to a button using
            [CardAction.dialogAction()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.cardaction#dialogaction)

            to trigger the action. You can also use
            [dialogArgs](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#dialogargs)
            to pass additional params to the dialog being started.
          optional: true
      return:
        type:
          - botbuilder.Dialog
        description: ''
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.cancelAction
    name: 'cancelAction(string, TextOrMessageType, ICancelActionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Binds an action to the dialog that will cancel the dialog anytime it's
      triggered. When canceled, the

      dialogs parent will be resumed with a
      [resumed](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogresult#resumed)
      code indicating that it was
      [canceled](/en-us/node/builder/chat-reference/enums/_botbuilder_d_.resumereason#canceled).
    syntax:
      content: >-
        function cancelAction(name: string, msg?: TextOrMessageType, options?:
        ICancelActionOptions)
      parameters:
        - id: name
          type:
            - string
          description: Unique name to assign the action.
        - id: msg
          type:
            - botbuilder.TextOrMessageType
          description: (Optional) message to send the user prior to canceling the dialog.
          optional: true
        - id: options
          type:
            - botbuilder.ICancelActionOptions
          description: >
            (Optional) options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action,
            otherwise the action needs to be bound to a button using
            [CardAction.dialogAction()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.cardaction#dialogaction)

            to trigger the action.
          optional: true
      return:
        type:
          - botbuilder.Dialog
        description: ''
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.clone
    name: clone(ActionSet)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a clone of an existing ActionSet.
    syntax:
      content: 'function clone(copyTo?: ActionSet)'
      parameters:
        - id: copyTo
          type:
            - botbuilder.ActionSet
          description: >
            (Optional) instance to copy the current object to. If missing a new
            instance will be created.
          optional: true
      return:
        type:
          - botbuilder.ActionSet
        description: ''
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.customAction
    name: customAction(IDialogActionOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Binds a custom action to the dialog that will call the passed in
      [onSelectAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#onselectaction)

      handler when triggered.
    syntax:
      content: 'function customAction(options: IDialogActionOptions)'
      parameters:
        - id: options
          type:
            - botbuilder.IDialogActionOptions
          description: >
            The options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action.
            Custom matching logic can be provided using
            [onFindAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#onfindaction).
      return:
        type:
          - botbuilder.Library
        description: ''
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.dialogInterrupted
    name: 'dialogInterrupted(Session, string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called when a root dialog is being interrupted by another dialog. This
      gives the dialog

      that's being interrupted a chance to run custom logic before it's removed
      from the stack.

      The dialog itself is responsible for clearing the dialog stack and
      starting the new dialog.
    syntax:
      content: >-
        function dialogInterrupted(session: Session, dialogId: string,
        dialogArgs: any)
      parameters:
        - id: session
          type:
            - botbuilder.Session
          description: Session object for the current conversation.
        - id: dialogId
          type:
            - string
          description: ID of the dialog that should be started.
        - id: dialogArgs
          type:
            - any
          description: |
            Arguments that should be passed to the new dialog.
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.dialogResumed
    name: 'dialogResumed(Session, IDialogResult<T>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: A child dialog has ended and the current one is being resumed.
    syntax:
      content: 'function dialogResumed<T>(session: Session, result: IDialogResult<T>)'
      parameters:
        - id: session
          type:
            - botbuilder.Session
          description: Session object for the current conversation.
        - id: result
          type:
            - botbuilder.IDialogResult<T>
          description: |
            Result returned by the child dialog.
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.endConversationAction
    name: 'endConversationAction(string, TextOrMessageType, ICancelActionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Binds an action that will end the conversation with the user when
      triggered.
    syntax:
      content: >-
        function endConversationAction(name: string, msg?: TextOrMessageType,
        options?: ICancelActionOptions)
      parameters:
        - id: name
          type:
            - string
          description: Unique name to assign the action.
        - id: msg
          type:
            - botbuilder.TextOrMessageType
          description: >-
            (Optional) message to send the user prior to ending the
            conversation.
          optional: true
        - id: options
          type:
            - botbuilder.ICancelActionOptions
          description: >
            (Optional) options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action,
            otherwise the action needs to be bound to a button using
            [CardAction.dialogAction()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.cardaction#dialogaction)

            to trigger the action.
          optional: true
      return:
        type:
          - botbuilder.Dialog
        description: ''
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.findActionRoutes
    name: >-
      findActionRoutes(IRecognizeDialogContext, (err: Error, results:
      IRouteResult[]) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called during the
      [Library.findRoutes()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.library#findroutes)

      call for each dialog on the stack to determine if any of the dialogs
      actions are triggered

      by the users utterance.
    syntax:
      content: >-
        function findActionRoutes(context: IRecognizeDialogContext, callback:
        (err: Error, results: IRouteResult[]) => void)
      parameters:
        - id: context
          type:
            - botbuilder.IRecognizeDialogContext
          description: >-
            The context of the incoming message as well as the
            [dialogData](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.session#dialogdata)
            for the evaluated dialog.
        - id: callback
          type:
            - '(err: Error, results: IRouteResult[]) => void'
          description: |
            Function to invoke with the top candidate route(s).
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.recognize
    name: >-
      recognize(IRecognizeDialogContext, (err: Error, result: IRecognizeResult)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Parses the users utterance and assigns a score from 0.0 - 1.0 indicating
      how confident the

      dialog is that it understood the users utterance.  This method is always
      called for the active

      dialog on the stack.  A score of 1.0 will indicate a perfect match and
      terminate any further

      recognition.

      When the score is less than 1.0, every dialog on the stack will have its

      [recognizeAction()](#recognizeaction) method called as well to see if
      there are any named

      actions bound to the dialog that better matches the users utterance.
      Global actions registered

      at the bot level will also be evaluated. If the dialog has a score higher
      then any bound actions,

      the dialogs [replyReceived()](#replyreceived) method will be called with
      the result object

      returned from the recognize() call.  This lets the dialog pass additional
      data collected during

      the recognize phase to the replyReceived() method for handling.


      Should there be an action with a higher score then the dialog the action
      will be invoked instead

      of the dialogs replyReceived() method.  The dialog will stay on the stack
      and may be resumed

      at some point should the action invoke a new dialog so dialogs should
      prepare for unexpected calls

      to [dialogResumed()](#dialogresumed).
    syntax:
      content: >-
        function recognize(context: IRecognizeDialogContext, callback: (err:
        Error, result: IRecognizeResult) => void)
      parameters:
        - id: context
          type:
            - botbuilder.IRecognizeDialogContext
          description: The context of the request.
        - id: callback
          type:
            - '(err: Error, result: IRecognizeResult) => void'
          description: |
            Function to invoke with the recognition results.
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.reloadAction
    name: 'reloadAction(string, TextOrMessageType, IBeginDialogActionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Binds an action to the dialog that will cause the dialog to be reloaded
      anytime it's triggered. This is

      useful to implement logic that handle user utterances like "start over".
    syntax:
      content: >-
        function reloadAction(name: string, msg?: TextOrMessageType, options?:
        IBeginDialogActionOptions)
      parameters:
        - id: name
          type:
            - string
          description: Unique name to assign the action.
        - id: msg
          type:
            - botbuilder.TextOrMessageType
          description: (Optional) message to send the user prior to reloading the dialog.
          optional: true
        - id: options
          type:
            - botbuilder.IBeginDialogActionOptions
          description: >
            (Optional) options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action,
            otherwise the action needs to be bound to a button using
            [CardAction.dialogAction()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.cardaction#dialogaction)

            to trigger the action. You can also use
            [dialogArgs](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#dialogargs)
            to pass additional params to the dialog when reloaded.
          optional: true
      return:
        type:
          - botbuilder.Dialog
        description: ''
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.replyReceived
    name: 'replyReceived(Session, IRecognizeResult)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function replyReceived(session: Session, recognizeResult?:
        IRecognizeResult)
      parameters:
        - id: session
          type:
            - botbuilder.Session
          description: ''
        - id: recognizeResult
          type:
            - botbuilder.IRecognizeResult
          description: ''
          optional: true
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.selectActionRoute
    name: 'selectActionRoute(Session, IRouteResult)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Selects the route that had the highest confidence score for the utterance.
    syntax:
      content: 'function selectActionRoute(session: Session, route: IRouteResult)'
      parameters:
        - id: session
          type:
            - botbuilder.Session
          description: Session object for the current conversation.
        - id: route
          type:
            - botbuilder.IRouteResult
          description: >
            Results returned from the call to
            [findActionRoutes()](#findactionroute).
    package: botbuilder
  - uid: botbuilder.BotConnectorBot.triggerAction
    name: triggerAction(ITriggerActionOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Binds an action to the dialog that will make it the active dialog anytime
      it's triggered.

      The default behaviour is to interupt any existing dialog by clearing the
      stack and starting

      the dialog at the root of the stack.  The dialog being interrupted can
      intercept this

      interruption by adding a custom
      [onInterrupted](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.itriggeractionsoptions#oninterrupted)

      handler to their trigger action options.  Additionally, you can customize
      the way the

      triggered dialog is started by providing a custom
      [onSelectAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.ibegindialogactionsoptions#onselectaction)

      handler to your trigger action options.
    syntax:
      content: 'function triggerAction(options: ITriggerActionOptions)'
      parameters:
        - id: options
          type:
            - botbuilder.ITriggerActionOptions
          description: |
            Options used to configure the action.
      return:
        type:
          - botbuilder.Dialog
        description: ''
    package: botbuilder
references:
  - uid: botbuilder.Dialog
    name: Dialog
    spec.typeScript:
      - name: Dialog
        fullName: Dialog
        uid: botbuilder.Dialog
  - uid: botbuilder.ActionSet
    name: ActionSet
    spec.typeScript:
      - name: ActionSet
        fullName: ActionSet
        uid: botbuilder.ActionSet
  - uid: botbuilder.Session
    name: Session
    spec.typeScript:
      - name: Session
        fullName: Session
        uid: botbuilder.Session
  - uid: botbuilder.IBeginDialogActionOptions
    name: IBeginDialogActionOptions
    spec.typeScript:
      - name: IBeginDialogActionOptions
        fullName: IBeginDialogActionOptions
        uid: botbuilder.IBeginDialogActionOptions
  - uid: botbuilder.TextOrMessageType
    name: TextOrMessageType
    spec.typeScript:
      - name: TextOrMessageType
        fullName: TextOrMessageType
        uid: botbuilder.TextOrMessageType
  - uid: botbuilder.ICancelActionOptions
    name: ICancelActionOptions
    spec.typeScript:
      - name: ICancelActionOptions
        fullName: ICancelActionOptions
        uid: botbuilder.ICancelActionOptions
  - uid: botbuilder.IDialogActionOptions
    name: IDialogActionOptions
    spec.typeScript:
      - name: IDialogActionOptions
        fullName: IDialogActionOptions
        uid: botbuilder.IDialogActionOptions
  - uid: botbuilder.Library
    name: Library
    spec.typeScript:
      - name: Library
        fullName: Library
        uid: botbuilder.Library
  - uid: botbuilder.IDialogResult<T>
    name: IDialogResult<T>
    spec.typeScript:
      - name: IDialogResult
        fullName: IDialogResult
        uid: botbuilder.IDialogResult
      - name: <T>
        fullName: <T>
  - uid: botbuilder.IRecognizeDialogContext
    name: IRecognizeDialogContext
    spec.typeScript:
      - name: IRecognizeDialogContext
        fullName: IRecognizeDialogContext
        uid: botbuilder.IRecognizeDialogContext
  - uid: botbuilder.IRecognizeResult
    name: IRecognizeResult
    spec.typeScript:
      - name: IRecognizeResult
        fullName: IRecognizeResult
        uid: botbuilder.IRecognizeResult
  - uid: botbuilder.IRouteResult
    name: IRouteResult
    spec.typeScript:
      - name: IRouteResult
        fullName: IRouteResult
        uid: botbuilder.IRouteResult
  - uid: botbuilder.ITriggerActionOptions
    name: ITriggerActionOptions
    spec.typeScript:
      - name: ITriggerActionOptions
        fullName: ITriggerActionOptions
        uid: botbuilder.ITriggerActionOptions
