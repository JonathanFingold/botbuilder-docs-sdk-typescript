### YamlMime:UniversalReference
items:
  - uid: botbuilder.DialogAction
    name: DialogAction
    fullName: DialogAction
    children:
      - botbuilder.DialogAction.beginDialog
      - botbuilder.DialogAction.endDialog
      - botbuilder.DialogAction.send
      - botbuilder.DialogAction.validatedPrompt
    langs:
      - typeScript
    type: class
    summary: >-
      Dialog actions offer static shortcuts to implementing common actions. They
      also implement support for

      named actions which can be bound to a dialog to handle global utterances
      from the user like "help" or

      "cancel". Actions get pushed onto and off of the dialog stack as part of
      dialogs so these listeners can

      come into and out of scope as the conversation progresses. You can also
      bind named to actions to buttons

      which let your bot respond to button clicks on cards that have maybe
      scrolled off the screen.
    package: botbuilder
  - uid: botbuilder.DialogAction.beginDialog
    name: 'beginDialog(string, T)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a closure that will passes control of the conversation to a new
      dialog.
    syntax:
      content: 'static function beginDialog<T>(id: string, args?: T)'
      parameters:
        - id: id
          type:
            - string
          description: Unique ID of the dialog to start.
        - id: args
          type:
            - T
          description: |
            (Optional) arguments to pass to the dialogs begin() method.
          optional: true
      return:
        type:
          - botbuilder.IDialogWaterfallStep
    package: botbuilder
  - uid: botbuilder.DialogAction.endDialog
    name: endDialog(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a closure that will end the current dialog.
    syntax:
      content: 'static function endDialog(result?: any)'
      parameters:
        - id: result
          type:
            - any
          description: |
            (Optional) results to pass to the parent dialog.
          optional: true
      return:
        type:
          - botbuilder.IDialogWaterfallStep
    package: botbuilder
  - uid: botbuilder.DialogAction.send
    name: 'send(string, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a closure that will send a simple text message to the user.
    syntax:
      content: 'static function send(msg: string, args: any[])'
      parameters:
        - id: msg
          type:
            - string
          description: >-
            Text of the message to send. The message will be localized using the
            sessions configured [localizer](#localizer). If arguments are passed
            in the message will be formatted using
            [sprintf-js](https://github.com/alexei/sprintf.js) (see the docs for
            details.)
        - id: args
          type:
            - 'any[]'
          description: |
            (Optional) arguments used to format the final output string.
      return:
        type:
          - botbuilder.IDialogWaterfallStep
    package: botbuilder
  - uid: botbuilder.DialogAction.validatedPrompt
    name: 'validatedPrompt(PromptType, (response: any) => boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a closure that wraps a built-in prompt with validation logic. The
      closure should be used

      to define a new dialog for the prompt using bot.add('/myPrompt',
      builder.DialogAction.)
    syntax:
      content: >-
        static function validatedPrompt(promptType: PromptType, validator:
        (response: any) => boolean)
      parameters:
        - id: promptType
          type:
            - botbuilder.PromptType
          description: Type of built-in prompt to validate.
        - id: validator
          type:
            - '(response: any) => boolean'
          description: >-
            Function used to validate the response. Should return true if the
            response is valid.
      return:
        type:
          - botbuilder.Dialog
    package: botbuilder
references:
  - uid: botbuilder.IDialogWaterfallStep
    name: IDialogWaterfallStep
    spec.typeScript:
      - name: IDialogWaterfallStep
        fullName: IDialogWaterfallStep
        uid: botbuilder.IDialogWaterfallStep
  - uid: botbuilder.PromptType
    name: PromptType
    spec.typeScript:
      - name: PromptType
        fullName: PromptType
        uid: botbuilder.PromptType
  - uid: botbuilder.Dialog
    name: Dialog
    spec.typeScript:
      - name: Dialog
        fullName: Dialog
        uid: botbuilder.Dialog
