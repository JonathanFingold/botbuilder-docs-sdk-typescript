### YamlMime:UniversalReference
items:
  - uid: botbuilder.ReceiptCard
    name: ReceiptCard
    fullName: ReceiptCard
    children:
      - botbuilder.ReceiptCard.buttons
      - botbuilder.ReceiptCard.facts
      - botbuilder.ReceiptCard.items
      - botbuilder.ReceiptCard.constructor
      - botbuilder.ReceiptCard.tap
      - botbuilder.ReceiptCard.tax
      - botbuilder.ReceiptCard.title
      - botbuilder.ReceiptCard.toAttachment
      - botbuilder.ReceiptCard.total
      - botbuilder.ReceiptCard.vat
    langs:
      - typeScript
    type: class
    summary: Card builder class that simplifies building receipt cards.
    package: botbuilder
  - uid: botbuilder.ReceiptCard.buttons
    name: 'buttons(ICardAction[] | IIsCardAction[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Set of actions applicable to the current card. Not all channels support
      buttons and the number of allowed buttons varies by channel.
    syntax:
      content: 'function buttons(list: ICardAction[] | IIsCardAction[])'
      parameters:
        - id: list
          type:
            - 'botbuilder.ICardAction[] | botbuilder.IIsCardAction[]'
          description: ''
      return:
        type:
          - botbuilder.ReceiptCard
    package: botbuilder
  - uid: botbuilder.ReceiptCard.facts
    name: 'facts(IFact[] | IIsFact[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Array of additional facts to display to user (shipping charges and such.)
      Not all facts will be displayed on all channels.
    syntax:
      content: 'function facts(list: IFact[] | IIsFact[])'
      parameters:
        - id: list
          type:
            - 'botbuilder.IFact[] | botbuilder.IIsFact[]'
          description: ''
      return:
        type:
          - botbuilder.ReceiptCard
    package: botbuilder
  - uid: botbuilder.ReceiptCard.items
    name: 'items(IReceiptItem[] | IIsReceiptItem[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Array of receipt items.
    syntax:
      content: 'function items(list: IReceiptItem[] | IIsReceiptItem[])'
      parameters:
        - id: list
          type:
            - 'botbuilder.IReceiptItem[] | botbuilder.IIsReceiptItem[]'
          description: ''
      return:
        type:
          - botbuilder.ReceiptCard
    package: botbuilder
  - uid: botbuilder.ReceiptCard.constructor
    name: ReceiptCard(Session)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new ReceiptCard.
    syntax:
      content: 'new ReceiptCard(session?: Session)'
      parameters:
        - id: session
          type:
            - botbuilder.Session
          description: |
            (Optional) will be used to localize any text.
          optional: true
    package: botbuilder
  - uid: botbuilder.ReceiptCard.tap
    name: tap(ICardAction | IIsCardAction)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This action will be activated when user taps on the card. Not all channels
      support tap actions.
    syntax:
      content: 'function tap(action: ICardAction | IIsCardAction)'
      parameters:
        - id: action
          type:
            - botbuilder.ICardAction | botbuilder.IIsCardAction
          description: ''
      return:
        type:
          - botbuilder.ReceiptCard
    package: botbuilder
  - uid: botbuilder.ReceiptCard.tax
    name: tax(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Total amount of TAX paid (or should be paid.)
    syntax:
      content: 'function tax(v: string)'
      parameters:
        - id: v
          type:
            - string
          description: ''
      return:
        type:
          - botbuilder.ReceiptCard
    package: botbuilder
  - uid: botbuilder.ReceiptCard.title
    name: 'title(TextType, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Title of the Card.
    syntax:
      content: 'function title(text: TextType, args: any[])'
      parameters:
        - id: text
          type:
            - botbuilder.TextType
          description: ''
        - id: args
          type:
            - 'any[]'
          description: ''
      return:
        type:
          - botbuilder.ReceiptCard
    package: botbuilder
  - uid: botbuilder.ReceiptCard.toAttachment
    name: toAttachment()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the JSON for the card.
    syntax:
      content: function toAttachment()
      parameters: []
      return:
        type:
          - botbuilder.IAttachment
    package: botbuilder
  - uid: botbuilder.ReceiptCard.total
    name: total(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Total amount of money paid (or should be paid.)
    syntax:
      content: 'function total(v: string)'
      parameters:
        - id: v
          type:
            - string
          description: ''
      return:
        type:
          - botbuilder.ReceiptCard
    package: botbuilder
  - uid: botbuilder.ReceiptCard.vat
    name: vat(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Total amount of VAT paid (or should be paid.)
    syntax:
      content: 'function vat(v: string)'
      parameters:
        - id: v
          type:
            - string
          description: ''
      return:
        type:
          - botbuilder.ReceiptCard
    package: botbuilder
references:
  - uid: botbuilder.Session
    name: Session
    spec.typeScript:
      - name: Session
        fullName: Session
        uid: botbuilder.Session
  - uid: 'botbuilder.ICardAction[] | botbuilder.IIsCardAction[]'
    name: 'IIsCardAction[]'
    spec.typeScript:
      - name: ICardAction
        fullName: ICardAction
        uid: botbuilder.ICardAction
      - name: '[] | '
        fullName: '[] | '
      - name: IIsCardAction
        fullName: IIsCardAction
        uid: botbuilder.IIsCardAction
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder.ReceiptCard
    name: ReceiptCard
    spec.typeScript:
      - name: ReceiptCard
        fullName: ReceiptCard
        uid: botbuilder.ReceiptCard
  - uid: 'botbuilder.IFact[] | botbuilder.IIsFact[]'
    name: 'IIsFact[]'
    spec.typeScript:
      - name: IFact
        fullName: IFact
        uid: botbuilder.IFact
      - name: '[] | '
        fullName: '[] | '
      - name: IIsFact
        fullName: IIsFact
        uid: botbuilder.IIsFact
      - name: '[]'
        fullName: '[]'
  - uid: 'botbuilder.IReceiptItem[] | botbuilder.IIsReceiptItem[]'
    name: 'IIsReceiptItem[]'
    spec.typeScript:
      - name: IReceiptItem
        fullName: IReceiptItem
        uid: botbuilder.IReceiptItem
      - name: '[] | '
        fullName: '[] | '
      - name: IIsReceiptItem
        fullName: IIsReceiptItem
        uid: botbuilder.IIsReceiptItem
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder.ICardAction | botbuilder.IIsCardAction
    name: IIsCardAction
    spec.typeScript:
      - name: ICardAction
        fullName: ICardAction
        uid: botbuilder.ICardAction
      - name: ' | '
        fullName: ' | '
      - name: IIsCardAction
        fullName: IIsCardAction
        uid: botbuilder.IIsCardAction
  - uid: botbuilder.TextType
    name: TextType
    spec.typeScript:
      - name: TextType
        fullName: TextType
        uid: botbuilder.TextType
  - uid: botbuilder.IAttachment
    name: IAttachment
    spec.typeScript:
      - name: IAttachment
        fullName: IAttachment
        uid: botbuilder.IAttachment
