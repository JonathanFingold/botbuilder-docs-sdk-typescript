### YamlMime:UniversalReference
items:
  - uid: botbuilder-calling.CallConnector
    name: CallConnector
    fullName: CallConnector
    children:
      - botbuilder-calling.CallConnector.constructor
      - botbuilder-calling.CallConnector.getData
      - botbuilder-calling.CallConnector.listen
      - botbuilder-calling.CallConnector.onEvent
      - botbuilder-calling.CallConnector.saveData
      - botbuilder-calling.CallConnector.send
      - botbuilder-calling.CallConnector.verifyBotFramework
    langs:
      - typeScript
    type: class
    summary: Connect a UniversalCallBot to the Skype calling service.
    package: botbuilder-calling
  - uid: botbuilder-calling.CallConnector.constructor
    name: CallConnector(ICallConnectorSettings)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new instnace of the ChatConnector.
    syntax:
      content: 'new CallConnector(settings?: ICallConnectorSettings)'
      parameters:
        - id: settings
          type:
            - botbuilder-calling.ICallConnectorSettings
          description: >
            (Optional) config params that let you specify the bots App ID &
            Password you were assigned in the Bot Frameworks developer portal.
          optional: true
    package: botbuilder-calling
  - uid: botbuilder-calling.CallConnector.getData
    name: 'getData(IBotStorageContext, (err: Error, data: IBotStorageData) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads in data from the Bot Frameworks state service.
    syntax:
      content: >-
        function getData(context: IBotStorageContext, callback: (err: Error,
        data: IBotStorageData) => void)
      parameters:
        - id: context
          type:
            - botbuilder-calling.IBotStorageContext
          description: ''
        - id: callback
          type:
            - '(err: Error, data: IBotStorageData) => void'
          description: ''
    package: botbuilder-calling
  - uid: botbuilder-calling.CallConnector.listen
    name: listen()
    children: []
    type: method
    langs:
      - typeScript
    summary: Registers an Express or Restify style hook to listen for new messages.
    syntax:
      content: function listen()
      parameters: []
      return:
        type:
          - '(req: any, res: any) => void'
        description: ''
    package: botbuilder-calling
  - uid: botbuilder-calling.CallConnector.onEvent
    name: 'onEvent((event: IEvent, cb?: (err: Error) => void) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called by the UniversalCallBot at registration time to register a handler
      for receiving incoming events from the calling service.
    syntax:
      content: >-
        function onEvent(handler: (event: IEvent, cb?: (err: Error) => void) =>
        void)
      parameters:
        - id: handler
          type:
            - '(event: IEvent, cb?: (err: Error) => void) => void'
          description: ''
    package: botbuilder-calling
  - uid: botbuilder-calling.CallConnector.saveData
    name: 'saveData(IBotStorageContext, IBotStorageData, (err: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Writes out data to the Bot Frameworks state service.
    syntax:
      content: >-
        function saveData(context: IBotStorageContext, data: IBotStorageData,
        callback?: (err: Error) => void)
      parameters:
        - id: context
          type:
            - botbuilder-calling.IBotStorageContext
          description: ''
        - id: data
          type:
            - botbuilder-calling.IBotStorageData
          description: ''
        - id: callback
          type:
            - '(err: Error) => void'
          description: ''
          optional: true
    package: botbuilder-calling
  - uid: botbuilder-calling.CallConnector.send
    name: 'send(IEvent, (err: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Called by the UniversalCallBot to deliver workflow actions to the service.
    syntax:
      content: 'function send(event: IEvent, done: (err: Error) => void)'
      parameters:
        - id: event
          type:
            - botbuilder-calling.IEvent
          description: ''
        - id: done
          type:
            - '(err: Error) => void'
          description: ''
    package: botbuilder-calling
  - uid: botbuilder-calling.CallConnector.verifyBotFramework
    name: verifyBotFramework()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Express or Resitify style middleware that verifies recieved messages are
      from the Bot Framework.
    syntax:
      content: function verifyBotFramework()
      parameters: []
      return:
        type:
          - '(req: any, res: any, next: any) => void'
        description: ''
    package: botbuilder-calling
references:
  - uid: botbuilder-calling.ICallConnectorSettings
    name: ICallConnectorSettings
    spec.typeScript:
      - name: ICallConnectorSettings
        fullName: ICallConnectorSettings
        uid: botbuilder-calling.ICallConnectorSettings
  - uid: botbuilder-calling.IBotStorageContext
    name: IBotStorageContext
    spec.typeScript:
      - name: IBotStorageContext
        fullName: IBotStorageContext
        uid: botbuilder-calling.IBotStorageContext
  - uid: botbuilder-calling.IBotStorageData
    name: IBotStorageData
    spec.typeScript:
      - name: IBotStorageData
        fullName: IBotStorageData
        uid: botbuilder-calling.IBotStorageData
  - uid: botbuilder-calling.IEvent
    name: IEvent
    spec.typeScript:
      - name: IEvent
        fullName: IEvent
        uid: botbuilder-calling.IEvent
