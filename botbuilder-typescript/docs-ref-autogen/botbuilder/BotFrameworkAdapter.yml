### YamlMime:UniversalReference
items:
  - uid: botbuilder.BotFrameworkAdapter
    name: BotFrameworkAdapter
    fullName: BotFrameworkAdapter
    children:
      - botbuilder.BotFrameworkAdapter.constructor
      - botbuilder.BotFrameworkAdapter.continueConversation
      - botbuilder.BotFrameworkAdapter.createConversation
      - botbuilder.BotFrameworkAdapter.deleteActivity
      - botbuilder.BotFrameworkAdapter.deleteConversationMember
      - botbuilder.BotFrameworkAdapter.emulateOAuthCards
      - botbuilder.BotFrameworkAdapter.getAadTokens
      - botbuilder.BotFrameworkAdapter.getActivityMembers
      - botbuilder.BotFrameworkAdapter.getConversationMembers
      - botbuilder.BotFrameworkAdapter.getConversations
      - botbuilder.BotFrameworkAdapter.getSignInLink
      - botbuilder.BotFrameworkAdapter.getTokenStatus
      - botbuilder.BotFrameworkAdapter.getUserToken
      - botbuilder.BotFrameworkAdapter.processActivity
      - botbuilder.BotFrameworkAdapter.sendActivities
      - botbuilder.BotFrameworkAdapter.signOutUser
      - botbuilder.BotFrameworkAdapter.updateActivity
    langs:
      - typeScript
    type: class
    summary: >-
      A BotAdapter class that connects your bot to Bot Framework channels and
      the Emulator.
    extends:
      name: BotAdapter
    package: botbuilder
    remarks: >-
      Use this adapter to connect your bot to the Bot Framework service, through
      which

      your bot can reach many chat channels like Skype, Slack, and Teams. This
      adapter

      also allows your bot to work with the Bot Framework Emulator, which
      simulates

      the Bot Framework service and provides a chat interface for testing and
      debugging.


      The following example shows the typical adapter setup:


      ```JavaScript

      const { BotFrameworkAdapter } = require('botbuilder');


      const adapter = new BotFrameworkAdapter({
         appId: process.env.MICROSOFT_APP_ID,
         appPassword: process.env.MICROSOFT_APP_PASSWORD
      });

      ```
  - uid: botbuilder.BotFrameworkAdapter.constructor
    name: BotFrameworkAdapter(Partial<BotFrameworkAdapterSettings>)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new BotFrameworkAdapter instance.
    syntax:
      content: 'new BotFrameworkAdapter(settings?: Partial<BotFrameworkAdapterSettings>)'
      parameters:
        - id: settings
          type:
            - Partial<botbuilder.BotFrameworkAdapterSettings>
          description: |
            (optional) configuration settings for the adapter.
          optional: true
    package: botbuilder
    remarks: |-
      Settings for this adapter include:
      ```javascript
      {
           "appId": "ID assigned to your bot in the [Bot Framework Portal](https://dev.botframework.com/).",
           "appPassword": "Password assigned to your bot in the [Bot Framework Portal](https://dev.botframework.com/).",
           "openIdMetadata": "The Open ID Metadata Endpoint for your bot to use.",
           "oAuthEndpoint": "The OAuth API Endpoint for your bot to use.",
           "channelService": "(Optional) The channel service option for this bot to validate connections from Azure or other channel locations"
       }
      ```
  - uid: botbuilder.BotFrameworkAdapter.continueConversation
    name: >-
      continueConversation(Partial<ConversationReference>, (context:
      TurnContext) => Promise<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Resume a conversation with a user, possibly after some time has gone by.'
    syntax:
      content: >-
        function continueConversation(reference: Partial<ConversationReference>,
        logic: (context: TurnContext) => Promise<void>)
      parameters:
        - id: reference
          type:
            - Partial<ConversationReference>
          description: A `ConversationReference` saved during a previous incoming activity.
        - id: logic
          type:
            - '(context: TurnContext) => Promise<void>'
          description: >
            A function handler that will be called to perform the bots logic
            after the the adapters middleware has been run.
      return:
        type:
          - Promise<void>
    package: botbuilder
    remarks: >-
      This is often referred to as the bot's "Proactive Messaging" flow as it
      lets the bot proactively

      send messages to a conversation or user without having to reply directly
      to an incoming message.

      Scenarios like sending notifications or coupons to a user are enabled by
      this method.


      In order to use this method, a ConversationReference must first be
      extracted from an incoming

      activity. This reference can be stored in a database and used to resume
      the conversation at a later time.

      The reference can be created from any incoming activity using
      `TurnContext.getConversationReference(context.activity)`.


      The processing steps for this method are very similar to
      [processActivity()](#processactivity)

      in that a `TurnContext` will be created which is then routed through the
      adapters middleware

      before calling the passed in logic handler. The key difference is that
      since an activity

      wasn't actually received from outside, it has to be created by the bot. 
      The created activity will have its address

      related fields populated but will have a `context.activity.type ===
      undefined`.


      ```JavaScript

      server.post('/api/notifyUser', async (req, res) => {
         // Lookup previously saved conversation reference
         const reference = await findReference(req.body.refId);

         // Proactively notify the user
         if (reference) {
            await adapter.continueConversation(reference, async (context) => {
               await context.sendActivity(req.body.message);
            });
            res.send(200);
         } else {
            res.send(404);
         }
      });

      ```
  - uid: botbuilder.BotFrameworkAdapter.createConversation
    name: >-
      createConversation(Partial<ConversationReference>, (context: TurnContext)
      => Promise<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Starts a new conversation with a user. This is typically used to Direct
      Message (DM) a member

      of a group.
    syntax:
      content: >-
        function createConversation(reference: Partial<ConversationReference>,
        logic?: (context: TurnContext) => Promise<void>)
      parameters:
        - id: reference
          type:
            - Partial<ConversationReference>
          description: >-
            A `ConversationReference` of the user to start a new conversation
            with.
        - id: logic
          type:
            - '(context: TurnContext) => Promise<void>'
          description: >
            A function handler that will be called to perform the bot's logic
            after the the adapters middleware has been run.
          optional: true
      return:
        type:
          - Promise<void>
    package: botbuilder
    remarks: >-
      This function creates a new conversation between the bot and a single
      user, as specified by

      the ConversationReference passed in. In multi-user chat environments, this
      typically means

      starting a 1:1 direct message conversation with a single user. If called
      on a reference

      already representing a 1:1 conversation, the new conversation will
      continue to be 1:1.


      * In order to use this method, a ConversationReference must first be
      extracted from an incoming

      activity. This reference can be stored in a database and used to resume
      the conversation at a later time.

      The reference can be created from any incoming activity using
      `TurnContext.getConversationReference(context.activity)`.


      The processing steps for this method are very similar to
      [processActivity()](#processactivity)

      in that a `TurnContext` will be created which is then routed through the
      adapters middleware

      before calling the passed in logic handler. The key difference is that
      since an activity

      wasn't actually received from outside, it has to be created by the bot. 
      The created activity will have its address

      related fields populated but will have a `context.activity.type ===
      undefined`..


      ```JavaScript

      // Get group members conversation reference

      const reference = TurnContext.getConversationReference(context.activity);


      // Start a new conversation with the user

      await adapter.createConversation(reference, async (ctx) => {
         await ctx.sendActivity(`Hi (in private)`);
      });

      ```
  - uid: botbuilder.BotFrameworkAdapter.deleteActivity
    name: 'deleteActivity(TurnContext, Partial<ConversationReference>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an activity that was previously sent to a channel.
    syntax:
      content: >-
        function deleteActivity(context: TurnContext, reference:
        Partial<ConversationReference>)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: reference
          type:
            - Partial<ConversationReference>
          description: |
            Conversation reference information for the activity being deleted.
      return:
        type:
          - Promise<void>
    package: botbuilder
    remarks: >-
      Calling `TurnContext.deleteActivity()` is the preferred way of deleting
      activities (rather than calling it directly from the adapter), as that

      will ensure that any interested middleware will be notified.


      > [!TIP]

      > Note: Not all chat channels support this method. Calling it on an
      unsupported channel may result in an error.
  - uid: botbuilder.BotFrameworkAdapter.deleteConversationMember
    name: 'deleteConversationMember(TurnContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a member from the current conversation.
    syntax:
      content: >-
        function deleteConversationMember(context: TurnContext, memberId:
        string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: memberId
          type:
            - string
          description: |
            ID of the member to delete from the conversation.
      return:
        type:
          - Promise<void>
    package: botbuilder
    remarks: |-
      Remove a member's identity information from the conversation.

      Note that this method does not apply to all channels.
  - uid: botbuilder.BotFrameworkAdapter.emulateOAuthCards
    name: 'emulateOAuthCards(TurnContext | string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Tells the token service to emulate the sending of OAuthCards for a
      channel.
    syntax:
      content: >-
        function emulateOAuthCards(contextOrServiceUrl: TurnContext | string,
        emulate: boolean)
      parameters:
        - id: contextOrServiceUrl
          type:
            - TurnContext | string
          description: The URL of the emulator.
        - id: emulate
          type:
            - boolean
          description: |
            If `true` the emulator will emulate the sending of OAuthCards.
      return:
        type:
          - Promise<void>
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.getAadTokens
    name: 'getAadTokens(TurnContext, string, string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Signs the user out with the token server.
    syntax:
      content: >-
        function getAadTokens(context: TurnContext, connectionName: string,
        resourceUrls: string[])
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: |
            Name of the auth connection to use.
        - id: resourceUrls
          type:
            - 'string[]'
          description: ''
      return:
        type:
          - 'Promise<[key: string]: TokenResponse>'
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.getActivityMembers
    name: 'getActivityMembers(TurnContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists the members of a given activity as specified in a TurnContext.
    syntax:
      content: 'function getActivityMembers(context: TurnContext, activityId?: string)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: activityId
          type:
            - string
          description: >
            (Optional) activity ID to enumerate. If not specified the current
            activities ID will be used.
          optional: true
      return:
        type:
          - 'Promise<ChannelAccount[]>'
    package: botbuilder
    remarks: >-
      Returns an array of ChannelAccount objects representing the users involved
      in a given activity.


      This is different from `getConversationMembers()` in that it will return
      only those users

      directly involved in the activity, not all members of the conversation.
  - uid: botbuilder.BotFrameworkAdapter.getConversationMembers
    name: getConversationMembers(TurnContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists the members of the current conversation as specified in a
      TurnContext.
    syntax:
      content: 'function getConversationMembers(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for the current turn of conversation with the user.
      return:
        type:
          - 'Promise<ChannelAccount[]>'
    package: botbuilder
    remarks: >-
      Returns an array of ChannelAccount objects representing the users
      currently involved in the conversation

      in which an activity occured.


      This is different from `getActivityMembers()` in that it will return all

      members of the conversation, not just those directly involved in the
      activity.
  - uid: botbuilder.BotFrameworkAdapter.getConversations
    name: 'getConversations(TurnContext | string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists the Conversations in which this bot has participated for a given
      channel server.
    syntax:
      content: >-
        function getConversations(contextOrServiceUrl: TurnContext | string,
        continuationToken?: string)
      parameters:
        - id: contextOrServiceUrl
          type:
            - TurnContext | string
          description: >-
            The URL of the channel server to query or a TurnContext.  This can
            be retrieved from `context.activity.serviceUrl`.
        - id: continuationToken
          type:
            - string
          description: >
            (Optional) token used to fetch the next page of results from the
            channel server. This should be left as `undefined` to retrieve the
            first page of results.
          optional: true
      return:
        type:
          - Promise<ConversationsResult>
    package: botbuilder
    remarks: >-
      The channel server returns results in pages and each page will include a
      `continuationToken`

      that can be used to fetch the next page of results from the server.
  - uid: botbuilder.BotFrameworkAdapter.getSignInLink
    name: 'getSignInLink(TurnContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets a signin link from the token server that can be sent as part of a
      SigninCard.
    syntax:
      content: 'function getSignInLink(context: TurnContext, connectionName: string)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: |
            Name of the auth connection to use.
      return:
        type:
          - Promise<string>
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.getTokenStatus
    name: 'getTokenStatus(TurnContext, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves the token status for each configured connection for the given
      user.
    syntax:
      content: >-
        function getTokenStatus(context: TurnContext, userId?: string,
        includeFilter?: string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: userId
          type:
            - string
          description: The user Id for which token status is retrieved.
          optional: true
        - id: includeFilter
          type:
            - string
          description: >-
            Optional comma seperated list of connection's to include. Blank will
            return token status for all configured connections.
          optional: true
      return:
        type:
          - 'Promise<TokenStatus[]>'
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.getUserToken
    name: 'getUserToken(TurnContext, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves the OAuth token for a user that is in a sign-in flow.
    syntax:
      content: >-
        function getUserToken(context: TurnContext, connectionName: string,
        magicCode?: string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: Name of the auth connection to use.
        - id: magicCode
          type:
            - string
          description: |
            (Optional) Optional user entered code to validate.
          optional: true
      return:
        type:
          - Promise<TokenResponse>
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.processActivity
    name: >-
      processActivity(WebRequest, WebResponse, (context: TurnContext) =>
      Promise<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Processes an incoming request received by the bots web server into a
      TurnContext.
    syntax:
      content: >-
        function processActivity(req: WebRequest, res: WebResponse, logic:
        (context: TurnContext) => Promise<any>)
      parameters:
        - id: req
          type:
            - botbuilder.WebRequest
          description: An Express or Restify style Request object.
        - id: res
          type:
            - botbuilder.WebResponse
          description: An Express or Restify style Response object.
        - id: logic
          type:
            - '(context: TurnContext) => Promise<any>'
          description: >
            A function handler that will be called to perform the bots logic
            after the received activity has been pre-processed by the adapter
            and routed through any middleware for processing.
      return:
        type:
          - Promise<void>
    package: botbuilder
    remarks: >-
      This method is the main way a bot receives incoming messages.


      This method takes a raw incoming request object from a webserver and
      processes it into a

      normalized TurnContext that can be used by the bot. This includes any
      messages sent from a

      user and is the method that drives what is often referred to as the bot's
      "Reactive Messaging"

      flow.


      The following steps will be taken to process the activity:


      - The identity of the sender will be verified to be either the Emulator or
      a valid Microsoft
        server. The bots `appId` and `appPassword` will be used during this process and the request
        will be rejected if the senders identity can't be verified.
      - The activity will be parsed from the body of the incoming request. An
      error will be returned
        if the activity can't be parsed.
      - A `TurnContext` instance will be created for the received activity and
      wrapped with a
        [Revocable Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable).
      - The context will be routed through any middleware registered with the
      adapter using
        [use()](#use).  Middleware is executed in the order in which it's added and any middleware
        can intercept or prevent further routing of the context by simply not calling the passed
        in `next()` function. This is called the "Leading Edge" of the request; middleware will
        get a second chance to run on the "Trailing Edge" of the request after the bots logic has run.
      - Assuming the context hasn't been intercepted by a piece of middleware,
      the context will be
        passed to the logic handler passed in.  The bot may perform additional routing or
        processing at this time. Returning a promise (or providing an `async` handler) will cause the
        adapter to wait for any asynchronous operations to complete.
      - Once the bot's logic completes, the promise chain set up by the
      middleware stack will be resolved,
        giving middleware a second chance to run on the "Trailing Edge" of the request.
      - After the middleware stack's promise chain has been fully resolved the
      context object will be
        `revoked()` and any future calls to the context will result in a `TypeError: Cannot perform
        'set' on a proxy that has been revoked` being thrown.

      > [!TIP]

      > Note: If you see the error `TypeError: Cannot perform 'set' on a proxy
      that has been revoked`

      > appearing in your bot's console output, the likely cause is that an
      async function was used

      > without using the `await` keyword. Make sure all async functions use
      await!


      ```JavaScript

      server.post('/api/messages', (req, res) => {
         // Route received request to adapter for processing
         adapter.processActivity(req, res, async (context) => {
             // Process any messages received
             if (context.activity.type === ActivityTypes.Message) {
                 await context.sendActivity(`Hello World`);
             }
         });
      });

      ```
  - uid: botbuilder.BotFrameworkAdapter.sendActivities
    name: 'sendActivities(TurnContext, Partial<Activity>[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a set of outgoing activities to the appropriate channel server.
    syntax:
      content: >-
        function sendActivities(context: TurnContext, activities:
        Partial<Activity>[])
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: activities
          type:
            - 'Partial<Activity>[]'
          description: |
            List of activities to send.
      return:
        type:
          - 'Promise<ResourceResponse[]>'
    package: botbuilder
    remarks: >-
      The activities will be sent one after another in the order in which
      they're received. A response object will be returned for each

      sent activity. For `message` activities this will contain the id of the
      delivered message.


      Instead of calling these methods directly on the adapter, calling
      `TurnContext.sendActivities()` or `TurnContext.sendActivity()`

      is the preferred way of sending activities as that will ensure that
      outgoing activities have been properly addressed

      and that any interested middleware has been notified.


      The primary scenario for calling this method directly is when you want to
      explicitly bypass

      going through any middleware. For instance, sending the `typing` activity
      might

      be a good reason to call this method directly as those activities are
      unlikely to require

      handling by middleware.
  - uid: botbuilder.BotFrameworkAdapter.signOutUser
    name: 'signOutUser(TurnContext, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Signs the user out with the token server.
    syntax:
      content: >-
        function signOutUser(context: TurnContext, connectionName?: string,
        userId?: string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type:
            - string
          description: Name of the auth connection to use.
          optional: true
        - id: userId
          type:
            - string
          description: id of user to sign out.
          optional: true
      return:
        type:
          - Promise<void>
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.updateActivity
    name: 'updateActivity(TurnContext, Partial<Activity>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Replaces an activity that was previously sent to a channel with an updated
      version.
    syntax:
      content: >-
        function updateActivity(context: TurnContext, activity:
        Partial<Activity>)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: activity
          type:
            - Partial<Activity>
          description: |
            New activity to replace a current activity with.
      return:
        type:
          - Promise<void>
    package: botbuilder
    remarks: >-
      Calling `TurnContext.updateActivity()` is the preferred way of updating
      activities (rather than calling it directly from the adapter) as that

      will ensure that any interested middleware has been notified.


      It should be noted that not all channels support this feature.
references:
  - uid: Partial<botbuilder.BotFrameworkAdapterSettings>
    name: BotFrameworkAdapterSettings>
    spec.typeScript:
      - name: Partial<
        fullName: Partial<
      - name: BotFrameworkAdapterSettings
        fullName: BotFrameworkAdapterSettings
        uid: botbuilder.BotFrameworkAdapterSettings
      - name: '>'
        fullName: '>'
  - uid: botbuilder.WebRequest
    name: WebRequest
    spec.typeScript:
      - name: WebRequest
        fullName: WebRequest
        uid: botbuilder.WebRequest
  - uid: botbuilder.WebResponse
    name: WebResponse
    spec.typeScript:
      - name: WebResponse
        fullName: WebResponse
        uid: botbuilder.WebResponse
