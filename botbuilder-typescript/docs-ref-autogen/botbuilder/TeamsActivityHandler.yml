### YamlMime:UniversalReference
items:
  - uid: botbuilder.TeamsActivityHandler
    name: TeamsActivityHandler
    fullName: TeamsActivityHandler
    children:
      - botbuilder.TeamsActivityHandler.onConversationUpdate
      - botbuilder.TeamsActivityHandler.onDialog
      - botbuilder.TeamsActivityHandler.onEvent
      - botbuilder.TeamsActivityHandler.onMembersAdded
      - botbuilder.TeamsActivityHandler.onMembersRemoved
      - botbuilder.TeamsActivityHandler.onMessage
      - botbuilder.TeamsActivityHandler.onMessageReaction
      - botbuilder.TeamsActivityHandler.onReactionsAdded
      - botbuilder.TeamsActivityHandler.onReactionsRemoved
      - botbuilder.TeamsActivityHandler.onTeamsChannelCreatedEvent
      - botbuilder.TeamsActivityHandler.onTeamsChannelDeletedEvent
      - botbuilder.TeamsActivityHandler.onTeamsChannelRenamedEvent
      - botbuilder.TeamsActivityHandler.onTeamsMembersAddedEvent
      - botbuilder.TeamsActivityHandler.onTeamsMembersRemovedEvent
      - botbuilder.TeamsActivityHandler.onTeamsTeamRenamedEvent
      - botbuilder.TeamsActivityHandler.onTokenResponseEvent
      - botbuilder.TeamsActivityHandler.onTurn
      - botbuilder.TeamsActivityHandler.onUnrecognizedActivityType
      - botbuilder.TeamsActivityHandler.run
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: ActivityHandler
    package: botbuilder
  - uid: botbuilder.TeamsActivityHandler.onConversationUpdate
    name: onConversationUpdate(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Receives all ConversationUpdate activities, regardless of whether members
      were added or removed
    syntax:
      content: 'function onConversationUpdate(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: >-
      Conversation update activities describe a change in a conversation's
      members, description, existence, or otherwise.
  - uid: botbuilder.TeamsActivityHandler.onDialog
    name: onDialog(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      onDialog fires at the end of the event emission process, and should be
      used to handle Dialog activity.
    syntax:
      content: 'function onDialog(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: |-
      Sample code:
      ```javascript
      bot.onDialog(async (context, next) => {
           if (context.activity.type === ActivityTypes.Message) {
               const dialogContext = await dialogSet.createContext(context);
               const results = await dialogContext.continueDialog();
               await conversationState.saveChanges(context);
           }

           await next();
      });
      ```
  - uid: botbuilder.TeamsActivityHandler.onEvent
    name: onEvent(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: Receives all Event activities.
    syntax:
      content: 'function onEvent(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: >-
      Event activities communicate programmatic information from a client or
      channel to a bot.

      The meaning of an event activity is defined by the `name` field.
  - uid: botbuilder.TeamsActivityHandler.onMembersAdded
    name: onMembersAdded(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Receives only ConversationUpdate activities representing members being
      added.
    syntax:
      content: 'function onMembersAdded(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: context.activity.membersAdded will include at least one entry.
  - uid: botbuilder.TeamsActivityHandler.onMembersRemoved
    name: onMembersRemoved(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Receives only ConversationUpdate activities representing members being
      removed.
    syntax:
      content: 'function onMembersRemoved(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: context.activity.membersRemoved will include at least one entry.
  - uid: botbuilder.TeamsActivityHandler.onMessage
    name: onMessage(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: Receives all incoming Message activities
    syntax:
      content: 'function onMessage(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: >-
      Message activities represent content intended to be shown within a
      conversational interface.

      Message activities may contain text, speech, interactive cards, and binary
      or unknown attachments.

      Note that while most messages do contain text, this field is not always
      present!
  - uid: botbuilder.TeamsActivityHandler.onMessageReaction
    name: onMessageReaction(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Receives only MessageReaction activities, regardless of whether message
      reactions were added or removed
    syntax:
      content: 'function onMessageReaction(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: >-
      MessageReaction activities are sent to the bot when a message reacion,
      such as 'like' or 'sad' are

      associated with an activity previously sent from the bot.
  - uid: botbuilder.TeamsActivityHandler.onReactionsAdded
    name: onReactionsAdded(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Receives only MessageReaction activities representing message reactions
      being added.
    syntax:
      content: 'function onReactionsAdded(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: context.activity.reactionsAdded will include at least one entry.
  - uid: botbuilder.TeamsActivityHandler.onReactionsRemoved
    name: onReactionsRemoved(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Receives only MessageReaction activities representing message reactions
      being removed.
    syntax:
      content: 'function onReactionsRemoved(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: context.activity.reactionsRemoved will include at least one entry.
  - uid: botbuilder.TeamsActivityHandler.onTeamsChannelCreatedEvent
    name: >-
      onTeamsChannelCreatedEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function onTeamsChannelCreatedEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type:
            - >-
              (channelInfo: ChannelInfo, teamInfo: TeamInfo, context:
              TurnContext, next: () => Promise<void>) => Promise<void>
          description: |+

      return:
        type:
          - this
    package: botbuilder
  - uid: botbuilder.TeamsActivityHandler.onTeamsChannelDeletedEvent
    name: >-
      onTeamsChannelDeletedEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function onTeamsChannelDeletedEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type:
            - >-
              (channelInfo: ChannelInfo, teamInfo: TeamInfo, context:
              TurnContext, next: () => Promise<void>) => Promise<void>
          description: |+

      return:
        type:
          - this
    package: botbuilder
  - uid: botbuilder.TeamsActivityHandler.onTeamsChannelRenamedEvent
    name: >-
      onTeamsChannelRenamedEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function onTeamsChannelRenamedEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type:
            - >-
              (channelInfo: ChannelInfo, teamInfo: TeamInfo, context:
              TurnContext, next: () => Promise<void>) => Promise<void>
          description: |+

      return:
        type:
          - this
    package: botbuilder
  - uid: botbuilder.TeamsActivityHandler.onTeamsMembersAddedEvent
    name: >-
      onTeamsMembersAddedEvent((membersAdded: ChannelAccount[], teamInfo:
      TeamInfo, context: TurnContext, next: () => Promise<void>) =>
      Promise<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function onTeamsMembersAddedEvent(handler: (membersAdded:
        ChannelAccount[], teamInfo: TeamInfo, context: TurnContext, next: () =>
        Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type:
            - >-
              (membersAdded: ChannelAccount[], teamInfo: TeamInfo, context:
              TurnContext, next: () => Promise<void>) => Promise<void>
          description: |+

      return:
        type:
          - this
    package: botbuilder
  - uid: botbuilder.TeamsActivityHandler.onTeamsMembersRemovedEvent
    name: >-
      onTeamsMembersRemovedEvent((membersRemoved: ChannelAccount[], teamInfo:
      TeamInfo, context: TurnContext, next: () => Promise<void>) =>
      Promise<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function onTeamsMembersRemovedEvent(handler: (membersRemoved:
        ChannelAccount[], teamInfo: TeamInfo, context: TurnContext, next: () =>
        Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type:
            - >-
              (membersRemoved: ChannelAccount[], teamInfo: TeamInfo, context:
              TurnContext, next: () => Promise<void>) => Promise<void>
          description: |+

      return:
        type:
          - this
    package: botbuilder
  - uid: botbuilder.TeamsActivityHandler.onTeamsTeamRenamedEvent
    name: >-
      onTeamsTeamRenamedEvent((teamInfo: TeamInfo, context: TurnContext, next:
      () => Promise<void>) => Promise<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function onTeamsTeamRenamedEvent(handler: (teamInfo: TeamInfo, context:
        TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type:
            - >-
              (teamInfo: TeamInfo, context: TurnContext, next: () =>
              Promise<void>) => Promise<void>
          description: |+

      return:
        type:
          - this
    package: botbuilder
  - uid: botbuilder.TeamsActivityHandler.onTokenResponseEvent
    name: onTokenResponseEvent(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: Receives event activities of type 'tokens/response'
    syntax:
      content: 'function onTokenResponseEvent(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: These events occur during the oauth flow
  - uid: botbuilder.TeamsActivityHandler.onTurn
    name: onTurn(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Bind a handler to the Turn event that is fired for every incoming
      activity, regardless of type
    syntax:
      content: 'function onTurn(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
  - uid: botbuilder.TeamsActivityHandler.onUnrecognizedActivityType
    name: onUnrecognizedActivityType(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      UnrecognizedActivityType will fire if an activity is received with a type
      that has not previously been defined.
    syntax:
      content: 'function onUnrecognizedActivityType(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - BotHandler
          description: >
            BotHandler A handler function in the form async(context, next) => {
            ... }
      return:
        type:
          - this
    package: botbuilder
    remarks: >-
      Some channels or custom adapters may create Actitivies with different,
      "unofficial" types.

      These events will be passed through as UnrecognizedActivityType events.

      Check `context.activity.type` for the type value.
  - uid: botbuilder.TeamsActivityHandler.run
    name: run(TurnContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      `run()` is the main "activity handler" function used to ingest activities
      into the event emission process.
    syntax:
      content: 'function run(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: >
            TurnContext A TurnContext representing an incoming Activity from an
            Adapter
      return:
        type:
          - Promise<void>
    package: botbuilder
    remarks: |-
      Sample code:
      ```javascript
       server.post('/api/messages', (req, res) => {
           adapter.processActivity(req, res, async (context) => {
               // Route to main dialog.
               await bot.run(context);
           });
      });
      ```
