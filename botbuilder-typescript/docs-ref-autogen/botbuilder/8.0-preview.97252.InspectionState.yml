### YamlMime:UniversalReference
items:
  - uid: botbuilder - v4.8.0-preview.97252.InspectionState
    name: InspectionState
    fullName: InspectionState
    children:
      - botbuilder - v4.8.0-preview.97252.InspectionState.clear
      - botbuilder - v4.8.0-preview.97252.InspectionState.createProperty
      - botbuilder - v4.8.0-preview.97252.InspectionState.delete
      - botbuilder - v4.8.0-preview.97252.InspectionState.get
      - botbuilder - v4.8.0-preview.97252.InspectionState.constructor
      - botbuilder - v4.8.0-preview.97252.InspectionState.load
      - botbuilder - v4.8.0-preview.97252.InspectionState.saveChanges
    langs:
      - typeScript
    type: class
    summary: >-
      InspectionState for use by the InspectionMiddleware for emulator
      inspection of runtime Activities and BotState.
    extends:
      name: BotState
    package: botbuilder - v4
    remarks: >-
      InspectionState for use by the InspectionMiddleware for emulator
      inspection of runtime Activities and BotState.
  - uid: botbuilder - v4.8.0-preview.97252.InspectionState.clear
    name: clear(TurnContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: Clears the current state object for a turn.
    syntax:
      content: 'function clear(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for current turn of conversation with the user.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder - v4
    remarks: >-
      The cleared state object will not be persisted until
      [saveChanges()](#savechanges) has

      been called.


      ```JavaScript

      await botState.clear(context);

      await botState.saveChanges(context);

      ```
  - uid: botbuilder - v4.8.0-preview.97252.InspectionState.createProperty
    name: createProperty(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new property accessor for reading and writing an individual
      property to the bot

      states storage object.
    syntax:
      content: 'function createProperty<T>(name: string)'
      parameters:
        - id: name
          type:
            - string
          description: |
            Name of the property to add.
      return:
        type:
          - StatePropertyAccessor<T>
        description: ''
    package: botbuilder - v4
  - uid: botbuilder - v4.8.0-preview.97252.InspectionState.delete
    name: delete(TurnContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the backing state object for the current turn.
    syntax:
      content: 'function delete(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for current turn of conversation with the user.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder - v4
    remarks: >-
      The state object will be removed from storage if it exists.  If the state
      object has been

      read in and cached, the cache will be cleared.


      ```JavaScript

      await botState.delete(context);

      ```
  - uid: botbuilder - v4.8.0-preview.97252.InspectionState.get
    name: get(TurnContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a cached state object or undefined if not cached.
    syntax:
      content: 'function get(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for current turn of conversation with the user.
      return:
        type:
          - any | undefined
        description: ''
    package: botbuilder - v4
    remarks: >-
      This example shows how to synchronously get an already loaded and cached
      state object:


      ```JavaScript

      const state = botState.get(context);

      ```
  - uid: botbuilder - v4.8.0-preview.97252.InspectionState.constructor
    name: InspectionState(Storage)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new InspectionState(storage: Storage)'
      parameters:
        - id: storage
          type:
            - Storage
          description: ''
    package: botbuilder - v4
  - uid: botbuilder - v4.8.0-preview.97252.InspectionState.load
    name: 'load(TurnContext, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Reads in and caches the backing state object for a turn.
    syntax:
      content: 'function load(context: TurnContext, force?: boolean)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for current turn of conversation with the user.
        - id: force
          type:
            - boolean
          description: >
            (Optional) If `true` the cache will be bypassed and the state will
            always be read in directly from storage. Defaults to `false`.
          optional: true
      return:
        type:
          - Promise<any>
        description: ''
    package: botbuilder - v4
    remarks: >-
      Subsequent reads will return the cached object unless the `force` flag is
      passed in which

      will force the state object to be re-read.


      This method is automatically called on first access of any of created
      property accessors.


      ```JavaScript

      const state = await botState.load(context);

      ```
  - uid: botbuilder - v4.8.0-preview.97252.InspectionState.saveChanges
    name: 'saveChanges(TurnContext, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Saves the cached state object if it's been changed.
    syntax:
      content: 'function saveChanges(context: TurnContext, force?: boolean)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for current turn of conversation with the user.
        - id: force
          type:
            - boolean
          description: >
            (Optional) if `true` the state will always be written out regardless
            of its change state. Defaults to `false`.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder - v4
    remarks: >-
      If the `force` flag is passed in the cached state object will be saved
      regardless of

      whether its been changed or not and if no object has been cached, an empty
      object will be

      created and then saved.


      ```JavaScript

      await botState.saveChanges(context);

      ```
