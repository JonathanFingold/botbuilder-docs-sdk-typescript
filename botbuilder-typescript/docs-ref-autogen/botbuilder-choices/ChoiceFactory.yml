### YamlMime:UniversalReference
items:
  - uid: botbuilder-choices.ChoiceFactory
    name: ChoiceFactory
    fullName: ChoiceFactory
    children:
      - botbuilder-choices.ChoiceFactory.forChannel
      - botbuilder-choices.ChoiceFactory.inline
      - botbuilder-choices.ChoiceFactory.list
      - botbuilder-choices.ChoiceFactory.suggestedAction
      - botbuilder-choices.ChoiceFactory.toChoices
    langs:
      - typeScript
    type: class
    summary: >
      :package: **botbuilder-choices**

      A set of utility functions to assist with the formatting a 'message'
      activity containing a list

      of choices.


      **Usage Example**


      ```JavaScript

      const { ChoiceFactory } = require('botbuilder-choices');


      const message = ChoiceFactory.forChannel(context, ['red', 'green',
      'blue'], `Pick a color.`);

      await context.sendActivity(message);

      ```
    package: botbuilder-choices
  - uid: botbuilder-choices.ChoiceFactory.forChannel
    name: forChannel
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a 'message' activity containing a list of choices that has been
      automatically

      formatted based on the capabilities of a given channel. The algorithm
      prefers to format

      the supplied list of choices as suggested actions but can decide to use a
      text based list

      if suggested actions aren't natively supported by the channel, there are
      too many choices

      for the channel to display, or the title of any choice is too long.

      If the algorithm decides to use a list it will use an inline list if there
      are 3 or less

      choices and all have short titles. Otherwise, a numbered list is used.


      **Usage Example**


      ```JavaScript

      const message = ChoiceFactory.forChannel(context, [
         { value: 'red', action: { type: 'imBack', title: 'The Red Pill', value: 'red pill' } },
         { value: 'blue', action: { type: 'imBack', title: 'The Blue Pill', value: 'blue pill' } },
      ], `Which do you choose?`);

      await context.sendActivity(message);

      ```
    syntax:
      content: >-
        static function forChannel(channelOrContext: string | TurnContext,
        choices: string | Choice[], text?: string, speak?: string, options?:
        ChoiceFactoryOptions)
      parameters:
        - id: channelOrContext
          type:
            - string | TurnContext
          description: Channel ID or context object for the current turn of conversation.
        - id: choices
          type:
            - 'Choice!@[]'
          description: List of choices to render.
        - id: text
          type:
            - string
          description: (Optional) text of the message.
          optional: true
        - id: speak
          type:
            - string
          description: (Optional) SSML to speak for the message.
          optional: true
        - id: options
          type:
            - botbuilder-choices.ChoiceFactoryOptions
          description: |
            (Optional) formatting options to use when rendering as a list.
          optional: true
      return:
        type:
          - Partial<Activity>
  - uid: botbuilder-choices.ChoiceFactory.inline
    name: inline
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a 'message' activity containing a list of choices that has been
      formatted as an

      inline list.

      **Usage Example**


      ```JavaScript

      // Generates a message text of `Pick a color: (1. red, 2. green, or 3.
      blue)`

      const message = ChoiceFactory.inline(['red', 'green', 'blue'], `Pick a
      color:`);

      await context.sendActivity(message);

      ```
    syntax:
      content: >-
        static function inline(choices: string | Choice[], text?: string,
        speak?: string, options?: ChoiceFactoryOptions)
      parameters:
        - id: choices
          type:
            - 'Choice!@[]'
          description: List of choices to render.
        - id: text
          type:
            - string
          description: (Optional) text of the message.
          optional: true
        - id: speak
          type:
            - string
          description: (Optional) SSML to speak for the message.
          optional: true
        - id: options
          type:
            - botbuilder-choices.ChoiceFactoryOptions
          description: |
            (Optional) formatting options to tweak rendering of list.
          optional: true
      return:
        type:
          - Partial<Activity>
  - uid: botbuilder-choices.ChoiceFactory.list
    name: list
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a 'message' activity containing a list of choices that has been
      formatted as an

      numbered or bulleted list.

      **Usage Example**


      ```JavaScript

      const message = ChoiceFactory.list(['red', 'green', 'blue'], `Pick a
      color:`);

      await context.sendActivity(message);

      ```
    syntax:
      content: >-
        static function list(choices: string | Choice[], text?: string, speak?:
        string, options?: ChoiceFactoryOptions)
      parameters:
        - id: choices
          type:
            - 'Choice!@[]'
          description: List of choices to render.
        - id: text
          type:
            - string
          description: (Optional) text of the message.
          optional: true
        - id: speak
          type:
            - string
          description: (Optional) SSML to speak for the message.
          optional: true
        - id: options
          type:
            - botbuilder-choices.ChoiceFactoryOptions
          description: |
            (Optional) formatting options to tweak rendering of list.
          optional: true
      return:
        type:
          - Partial<Activity>
  - uid: botbuilder-choices.ChoiceFactory.suggestedAction
    name: suggestedAction
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a 'message' activity containing a list of choices that have been
      added as suggested

      actions.

      **Usage Example**


      ```JavaScript

      const message = ChoiceFactory.suggestedAction(['red', 'green', 'blue'],
      `Pick a color:`);

      await context.sendActivity(message);

      ```
    syntax:
      content: >-
        static function suggestedAction(choices: string | Choice[], text?:
        string, speak?: string)
      parameters:
        - id: choices
          type:
            - 'Choice!@[]'
          description: List of choices to add.
        - id: text
          type:
            - string
          description: (Optional) text of the message.
          optional: true
        - id: speak
          type:
            - string
          description: |
            (Optional) SSML to speak for the message.
          optional: true
      return:
        type:
          - Partial<Activity>
  - uid: botbuilder-choices.ChoiceFactory.toChoices
    name: toChoices
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Takes a mixed list of `string` and `Choice` based choices and returns them
      as a `Choice[]`.

      **Usage Example**


      ```JavaScript

      const choices = ChoiceFactory.toChoices(['red', 'green', 'blue']);

      ```
    syntax:
      content: 'static function toChoices(choices: string | Choice[] | undefined)'
      parameters:
        - id: choices
          type:
            - 'Choice!@[] | undefined'
          description: |
            List of choices to add.
      return:
        type:
          - 'botbuilder-choices.Choice[]'
