### YamlMime:UniversalReference
items:
  - uid: botbuilder-choices
    name: botbuilder-choices
    summary: ''
    children:
      - botbuilder-choices.ChoiceFactory
      - botbuilder-choices.ChoiceFactoryOptions
      - botbuilder-choices.Choice
      - botbuilder-choices.FindChoicesOptions
      - botbuilder-choices.FoundChoice
      - botbuilder-choices.FindValuesOptions
      - botbuilder-choices.FoundValue
      - botbuilder-choices.SortedValue
      - botbuilder-choices.ModelResult
      - botbuilder-choices.Token
      - botbuilder-choices.TokenizerFunction
      - botbuilder-choices.findChoices
      - botbuilder-choices.findValues
      - botbuilder-choices.recognizeChoices
      - botbuilder-choices.defaultTokenizer
    type: package
    langs:
      - typeScript
  - uid: botbuilder-choices.findChoices
    name: findChoices
    children: []
    type: function
    langs:
      - typeScript
    summary: Mid-level search function for recognizing a choice in an utterance.
    syntax:
      content: >-
        function findChoices(utterance: string, choices: string | Choice[],
        options?: FindChoicesOptions)
      parameters:
        - id: utterance
          type:
            - string
          description: >-
            The text or user utterance to search over. For an incoming 'message'
            activity you can simply use `context.activity.text`.
        - id: choices
          type:
            - 'Choice!@[]'
          description: List of choices to search over.
        - id: options
          type:
            - botbuilder-choices.FindChoicesOptions
          description: |
            (Optional) options used to tweak the search that's performed.
          optional: true
      return:
        type:
          - 'botbuilder-choices.ModelResult<botbuilder-choices.FoundChoice>[]'
    remarks: >-
      This function is layered above `findValues()` and simply determines all of
      the synonyms that

      should be searched for before calling `findValues()` to perform the actual
      search. The

      `recognizeChoices()` function is layered above this function and adds the
      ability to select a

      choice by index or ordinal position in the list. Calling this particular
      function is useful

      when you don't want the index and ordinal position recognition done by
      `recognizeChoices()`.


      ```JavaScript

      const { findChoices } = require('botbuilder-choices');


      const choices = ['red', 'green', 'blue'];

      const utterance = context.activity.text;

      const results = findChoices(utterance, choices);

      if (results.length == 1) {
          await context.sendActivity(`I like ${results[0].resolution.value} too!`);
      } else if (results.length > 1) {
          const ambiguous = results.map((r) => r.resolution.value);
          await context.sendActivity(ChoiceFactory.forChannel(context, ambiguous, `Which one?`));
      } else {
          await context.sendActivity(ChoiceFactory.forChannel(context, choices, `I didn't get that... Which color?`));
      }

      ```
  - uid: botbuilder-choices.findValues
    name: findValues
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      INTERNAL: Low-level function that searches for a set of values within an
      utterance. Higher level

      functions like `findChoices()` and `recognizeChoices()` are layered above
      this function.  In most

      cases its easier to just call one of the higher level functions instead
      but this function contains

      the fuzzy search algorithm that drives choice recognition.
    syntax:
      content: >-
        function findValues(utterance: string, values: SortedValue[], options?:
        FindValuesOptions)
      parameters:
        - id: utterance
          type:
            - string
          description: The text or user utterance to search over.
        - id: values
          type:
            - 'botbuilder-choices.SortedValue[]'
          description: List of values to search over.
        - id: options
          type:
            - botbuilder-choices.FindValuesOptions
          description: |
            (Optional) options used to tweak the search that's performed.
          optional: true
      return:
        type:
          - 'botbuilder-choices.ModelResult<botbuilder-choices.FoundValue>[]'
  - uid: botbuilder-choices.recognizeChoices
    name: recognizeChoices
    children: []
    type: function
    langs:
      - typeScript
    summary: High level function for recognizing a choice in a users utterance.
    syntax:
      content: >-
        function recognizeChoices(utterance: string, choices: string | Choice[],
        options?: FindChoicesOptions)
      parameters:
        - id: utterance
          type:
            - string
          description: >-
            The text or user utterance to search over. For an incoming 'message'
            activity you can simply use `context.activity.text`.
        - id: choices
          type:
            - 'Choice!@[]'
          description: List of choices to search over.
        - id: options
          type:
            - botbuilder-choices.FindChoicesOptions
          description: |
            (Optional) options used to tweak the search that's performed.
          optional: true
      return:
        type:
          - 'botbuilder-choices.ModelResult<botbuilder-choices.FoundChoice>[]'
    remarks: >-
      This is layered above the `findChoices()` function and adds logic to let
      the user specify their

      choice by index (they can say "one" to pick `choice[0]`) or ordinal
      position (they can say "the

      second one" to pick `choice[1]`.) The users utterance is recognized in the
      following order:


      - By name using `findChoices()`.

      - By 1's based ordinal position.

      - By 1's based index position.


      ```JavaScript

      const { recognizeChoices } = require('botbuilder-choices');


      const choices = ['red', 'green', 'blue'];

      const utterance = context.activity.text;

      const results = recognizeChoices(utterance, choices);

      if (results.length == 1) {
          await context.sendActivity(`I like ${results[0].resolution.value} too!`);
      } else if (results.length > 1) {
          const ambiguous = results.map((r) => r.resolution.value);
          await context.sendActivity(ChoiceFactory.forChannel(context, ambiguous, `Which one?`));
      } else {
          await context.sendActivity(ChoiceFactory.forChannel(context, choices, `I didn't get that... Which color?`));
      }

      ```
  - uid: botbuilder-choices.defaultTokenizer
    name: defaultTokenizer
    children: []
    type: function
    langs:
      - typeScript
    summary: Simple tokenizer that breaks on spaces and punctuation.
    syntax:
      content: 'function defaultTokenizer(text: string, locale?: string)'
      parameters:
        - id: text
          type:
            - string
          description: ''
        - id: locale
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - 'botbuilder-choices.Token[]'
    remarks: >-
      The only normalization done is to lowercase the tokens. Developers can
      wrap this tokenizer with

      their own function to perform additional normalization like
      [stemming](https://github.com/words/stemmer).


      ```JavaScript

      const { recognizeChoices, defaultTokenizer } =
      require('botbuilder-choices');

      const stemmer = require('stemmer');


      function customTokenizer(text, locale) {
          const tokens = defaultTokenizer(text, locale);
          tokens.forEach((t) => {
              t.normalized = stemmer(t.normalized);
          });
          return tokens;
      }


      const choices = ['red', 'green', 'blue'];

      const utterance = context.activity.text;

      const results = recognizeChoices(utterance, choices, { tokenizer:
      customTokenizer });

      ```
references:
  - uid: botbuilder-choices.ChoiceFactory
    name: ChoiceFactory
  - uid: botbuilder-choices.ChoiceFactoryOptions
    name: ChoiceFactoryOptions
  - uid: botbuilder-choices.Choice
    name: Choice
  - uid: botbuilder-choices.FindChoicesOptions
    name: FindChoicesOptions
  - uid: botbuilder-choices.FoundChoice
    name: FoundChoice
  - uid: botbuilder-choices.FindValuesOptions
    name: FindValuesOptions
  - uid: botbuilder-choices.FoundValue
    name: FoundValue
  - uid: botbuilder-choices.SortedValue
    name: SortedValue
  - uid: botbuilder-choices.ModelResult
    name: ModelResult
  - uid: botbuilder-choices.Token
    name: Token
  - uid: botbuilder-choices.TokenizerFunction
    name: TokenizerFunction
