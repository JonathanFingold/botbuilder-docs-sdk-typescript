### YamlMime:UniversalReference
items:
  - uid: botbuilder-ai.QnAMaker
    name: QnAMaker
    fullName: QnAMaker
    children:
      - botbuilder-ai.QnAMaker.answer
      - botbuilder-ai.QnAMaker.generateAnswer
      - botbuilder-ai.QnAMaker.onTurn
      - botbuilder-ai.QnAMaker.constructor
    langs:
      - typeScript
    type: class
    summary: >-
      Manages querying an individual QnA Maker knowledge base for answers. Can
      be added as middleware

      to automatically query the knowledge base anytime a messaged is received
      from the user. When

      used as middleware the component can be configured to either query the
      knowledge base before the

      bots logic runs or after the bots logic is run, as a fallback in the event
      the bot doesn't answer

      the user.
    package: botbuilder-ai
  - uid: botbuilder-ai.QnAMaker.answer
    name: answer
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls [generateAnswer()](#generateanswer) and sends the answer as a
      message ot the user.

      Returns a value of `true` if an answer was found and sent. If multiple
      answers are

      returned the first one will be delivered.
    syntax:
      content: 'function answer(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for the current turn of conversation with the use.
      return:
        type:
          - Promise<boolean>
  - uid: botbuilder-ai.QnAMaker.generateAnswer
    name: generateAnswer
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls the QnA Maker service to generate answer(s) for a question. The
      returned answers will

      be sorted by score with the top scoring answer returned first.
    syntax:
      content: >-
        function generateAnswer(question: string | undefined, top?: number,
        scoreThreshold?: number)
      parameters:
        - id: question
          type:
            - string | undefined
          description: The question to answer.
        - id: top
          type:
            - number
          description: (Optional) number of answers to return. Defaults to a value of `1`.
          optional: true
        - id: scoreThreshold
          type:
            - number
          description: >
            (Optional) minimum answer score needed to be considered a match to
            questions. Defaults to a value of `0.001`.
          optional: true
      return:
        type:
          - 'Promise<botbuilder-ai.QnAMakerResult[]>'
  - uid: botbuilder-ai.QnAMaker.onTurn
    name: onTurn
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onTurn(context: TurnContext, next: () => Promise<void>)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: ''
        - id: next
          type:
            - () => Promise<void>
          description: ''
      return:
        type:
          - Promise<void>
  - uid: botbuilder-ai.QnAMaker.constructor
    name: QnAMaker
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates a new QnAMaker instance.  You can initialize the endpoint for the
      instance by

      passing in the publishing endpoint provided in the QnA Maker portal.

      For version 2 this looks like:


      ```JS

      POST /knowledgebases/98185f59-3b6f-4d23-8ebb-XXXXXXXXXXXX/generateAnswer

      Host: https://westus.api.cognitive.microsoft.com/qnamaker/v2.0

      Ocp-Apim-Subscription-Key: 4cb65a02697745eca369XXXXXXXXXXXX

      Content-Type: application/json

      {"question":"hi"}

      ```


      And for the new version 4 this looks like:


      ```JS

      POST /knowledgebases/d31e049e-2557-463f-a0cc-XXXXXXXXXXXX/generateAnswer

      Host: https://test-knowledgebase.azurewebsites.net/qnamaker

      Authorization: EndpointKey 16cdca0b-3826-4a0f-a112-XXXXXXXXXXXX

      Content-Type: application/json

      {"question":"<Your question>"}

      ```
    syntax:
      content: >-
        new QnAMaker(endpoint: QnAMakerEndpoint | string, options?:
        QnAMakerOptions)
      parameters:
        - id: endpoint
          type:
            - botbuilder-ai.QnAMakerEndpoint | string
          description: The endpoint of the knowledge base to query.
        - id: options
          type:
            - botbuilder-ai.QnAMakerOptions
          description: |
            (Optional) additional settings used to configure the instance.
          optional: true
references:
  - uid: botbuilder-ai.QnAMakerEndpoint | string
    spec.typeScript:
      - name: QnAMakerEndpoint
        fullName: QnAMakerEndpoint
        uid: botbuilder-ai.QnAMakerEndpoint
      - name: ' | string'
        fullName: ' | string'
  - uid: botbuilder-ai.QnAMakerOptions
    spec.typeScript:
      - name: QnAMakerOptions
        fullName: QnAMakerOptions
        uid: botbuilder-ai.QnAMakerOptions
  - uid: 'Promise<botbuilder-ai.QnAMakerResult[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QnAMakerResult
        fullName: QnAMakerResult
        uid: botbuilder-ai.QnAMakerResult
      - name: '[]>'
        fullName: '[]>'
