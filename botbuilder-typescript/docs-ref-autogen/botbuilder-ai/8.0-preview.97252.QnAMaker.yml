### YamlMime:UniversalReference
items:
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMaker
    name: QnAMaker
    fullName: QnAMaker
    children:
      - botbuilder-ai - v4.8.0-preview.97252.QnAMaker.answer
      - botbuilder-ai - v4.8.0-preview.97252.QnAMaker.callTrainAsync
      - botbuilder-ai - v4.8.0-preview.97252.QnAMaker.generateAnswer
      - botbuilder-ai - v4.8.0-preview.97252.QnAMaker.getAnswers
      - botbuilder-ai - v4.8.0-preview.97252.QnAMaker.getAnswersRaw
      - botbuilder-ai - v4.8.0-preview.97252.QnAMaker.getLowScoreVariation
      - botbuilder-ai - v4.8.0-preview.97252.QnAMaker.logPersonalInformation
      - botbuilder-ai - v4.8.0-preview.97252.QnAMaker.constructor
      - botbuilder-ai - v4.8.0-preview.97252.QnAMaker.telemetryClient
    langs:
      - typeScript
    type: class
    summary: Query a QnA Maker knowledge base for answers and provide feedbacks.
    package: botbuilder-ai - v4
    remarks: >-
      This class is used to make queries to a single QnA Maker knowledge base
      and return the result.


      Use this to process incoming messages with the [getAnswers()](#getAnswers)
      method.
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMaker.answer
    name: answer(TurnContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls [generateAnswer()](#generateanswer) and sends the resulting answer
      as a reply to the user.
    syntax:
      content: 'function answer(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context for the current turn of conversation with the user.
      return:
        type:
          - Promise<boolean>
        description: ''
    package: botbuilder-ai - v4
    deprecated:
      content: >-
        Instead, favor using [QnAMaker.getAnswers()](#getAnswers) to generate
        answers for a question.
    remarks: >-
      Returns a value of `true` if an answer was found and sent. If multiple
      answers are

      returned the first one will be delivered.
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMaker.callTrainAsync
    name: callTrainAsync(FeedbackRecords)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send feedback to the knowledge base.
    syntax:
      content: 'function callTrainAsync(feedbackRecords: FeedbackRecords)'
      parameters:
        - id: feedbackRecords
          type:
            - botbuilder-ai - v4.8.0-preview.97252.FeedbackRecords
          description: |
            Feedback records.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-ai - v4
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMaker.generateAnswer
    name: 'generateAnswer(string | undefined, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Calls the QnA Maker service to generate answer(s) for a question.
    syntax:
      content: >-
        function generateAnswer(question: string | undefined, top?: number,
        scoreThreshold?: number)
      parameters:
        - id: question
          type:
            - string | undefined
          description: The question to answer.
        - id: top
          type:
            - number
          description: (Optional) number of answers to return. Defaults to a value of `1`.
          optional: true
        - id: scoreThreshold
          type:
            - number
          description: >
            (Optional) minimum answer score needed to be considered a match to
            questions. Defaults to a value of `0.001`.
          optional: true
      return:
        type:
          - 'Promise<botbuilder-ai - v4.8.0-preview.97252.QnAMakerResult[]>'
        description: ''
    package: botbuilder-ai - v4
    deprecated:
      content: >-
        Instead, favor using [QnAMaker.getAnswers()](#getAnswers) to generate
        answers for a question.
    remarks: >-
      Returns an array of answers sorted by score with the top scoring answer
      returned first.
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMaker.getAnswers
    name: >-
      getAnswers(TurnContext, QnAMakerOptions, [key: string]: string, [key:
      string]: number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Calls the QnA Maker service to generate answer(s) for a question.
    syntax:
      content: >-
        function getAnswers(context: TurnContext, options?: QnAMakerOptions,
        telemetryProperties?: [key: string]: string, telemetryMetrics?: [key:
        string]: number)
      parameters:
        - id: context
          type:
            - TurnContext
          description: >-
            The Turn Context that contains the user question to be queried
            against your knowledge base.
        - id: options
          type:
            - botbuilder-ai - v4.8.0-preview.97252.QnAMakerOptions
          description: >-
            (Optional) The options for the QnA Maker knowledge base. If null,
            constructor option is used for this instance.
          optional: true
        - id: telemetryProperties
          type:
            - '[key: string]: string'
          description: >-
            Additional properties to be logged to telemetry with the QnaMessage
            event.
          optional: true
        - id: telemetryMetrics
          type:
            - '[key: string]: number'
          description: >
            Additional metrics to be logged to telemetry with the QnaMessage
            event.
          optional: true
      return:
        type:
          - 'Promise<botbuilder-ai - v4.8.0-preview.97252.QnAMakerResult[]>'
        description: ''
    package: botbuilder-ai - v4
    remarks: >-
      Returns an array of answers sorted by score with the top scoring answer
      returned first.


      In addition to returning the results from QnA Maker,
      [getAnswers()](#getAnswers) will also

      emit a trace activity that contains the QnA Maker results.
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMaker.getAnswersRaw
    name: >-
      getAnswersRaw(TurnContext, QnAMakerOptions, [key: string]: string, [key:
      string]: number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAnswersRaw(context: TurnContext, options?: QnAMakerOptions,
        telemetryProperties?: [key: string]: string, telemetryMetrics?: [key:
        string]: number)
      parameters:
        - id: context
          type:
            - TurnContext
          description: ''
        - id: options
          type:
            - botbuilder-ai - v4.8.0-preview.97252.QnAMakerOptions
          description: ''
          optional: true
        - id: telemetryProperties
          type:
            - '[key: string]: string'
          description: ''
          optional: true
        - id: telemetryMetrics
          type:
            - '[key: string]: number'
          description: ''
          optional: true
      return:
        type:
          - Promise<botbuilder-ai - v4.8.0-preview.97252.QnAMakerResults>
        description: ''
    package: botbuilder-ai - v4
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMaker.getLowScoreVariation
    name: 'getLowScoreVariation(QnAMakerResult[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Filters the ambiguous question for active learning.
    syntax:
      content: 'function getLowScoreVariation(queryResult: QnAMakerResult[])'
      parameters:
        - id: queryResult
          type:
            - 'botbuilder-ai - v4.8.0-preview.97252.QnAMakerResult[]'
          description: |
            User query output.
      return:
        type:
          - 'any[]'
        description: ''
    package: botbuilder-ai - v4
    remarks: Returns a filtered array of ambiguous question.
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMaker.logPersonalInformation
    name: logPersonalInformation
    fullName: logPersonalInformation
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Gets a value indicating whether determines whether to log personal
      information that came from the user.
    syntax:
      content: boolean logPersonalInformation
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-ai - v4
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMaker.constructor
    name: 'QnAMaker(QnAMakerEndpoint, QnAMakerOptions, BotTelemetryClient, boolean)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new QnAMaker instance.
    syntax:
      content: >-
        new QnAMaker(endpoint: QnAMakerEndpoint, options: QnAMakerOptions,
        telemetryClient?: BotTelemetryClient, logPersonalInformation?: boolean)
      parameters:
        - id: endpoint
          type:
            - botbuilder-ai - v4.8.0-preview.97252.QnAMakerEndpoint
          description: The endpoint of the knowledge base to query.
        - id: options
          type:
            - botbuilder-ai - v4.8.0-preview.97252.QnAMakerOptions
          description: (Optional) additional settings used to configure the instance.
        - id: telemetryClient
          type:
            - BotTelemetryClient
          description: The BotTelemetryClient used for logging telemetry events.
          optional: true
        - id: logPersonalInformation
          type:
            - boolean
          description: >
            Set to true to include personally indentifiable information in
            telemetry events.
          optional: true
    package: botbuilder-ai - v4
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMaker.telemetryClient
    name: telemetryClient
    fullName: telemetryClient
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the currently configured botTelemetryClient that logs the events.
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        type:
          - BotTelemetryClient
        description: ''
    package: botbuilder-ai - v4
references:
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMakerEndpoint
    name: QnAMakerEndpoint
    spec.typeScript:
      - name: QnAMakerEndpoint
        fullName: QnAMakerEndpoint
        uid: botbuilder-ai - v4.8.0-preview.97252.QnAMakerEndpoint
  - uid: botbuilder-ai - v4.8.0-preview.97252.QnAMakerOptions
    name: QnAMakerOptions
    spec.typeScript:
      - name: QnAMakerOptions
        fullName: QnAMakerOptions
        uid: botbuilder-ai - v4.8.0-preview.97252.QnAMakerOptions
  - uid: botbuilder-ai - v4.8.0-preview.97252.FeedbackRecords
    name: FeedbackRecords
    spec.typeScript:
      - name: FeedbackRecords
        fullName: FeedbackRecords
        uid: botbuilder-ai - v4.8.0-preview.97252.FeedbackRecords
  - uid: 'Promise<botbuilder-ai - v4.8.0-preview.97252.QnAMakerResult[]>'
    name: 'QnAMakerResult[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QnAMakerResult
        fullName: QnAMakerResult
        uid: botbuilder-ai - v4.8.0-preview.97252.QnAMakerResult
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<botbuilder-ai - v4.8.0-preview.97252.QnAMakerResults>
    name: QnAMakerResults>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QnAMakerResults
        fullName: QnAMakerResults
        uid: botbuilder-ai - v4.8.0-preview.97252.QnAMakerResults
      - name: '>'
        fullName: '>'
  - uid: 'botbuilder-ai - v4.8.0-preview.97252.QnAMakerResult[]'
    name: 'QnAMakerResult[]'
    spec.typeScript:
      - name: QnAMakerResult
        fullName: QnAMakerResult
        uid: botbuilder-ai - v4.8.0-preview.97252.QnAMakerResult
      - name: '[]'
        fullName: '[]'
