### YamlMime:UniversalReference
items:
  - uid: botbuilder-core.TurnContext
    name: TurnContext
    fullName: TurnContext
    children:
      - botbuilder-core.TurnContext.activity
      - botbuilder-core.TurnContext.adapter
      - botbuilder-core.TurnContext.applyConversationReference
      - botbuilder-core.TurnContext.deleteActivity
      - botbuilder-core.TurnContext.getConversationReference
      - botbuilder-core.TurnContext.getMentions
      - botbuilder-core.TurnContext.getReplyConversationReference
      - botbuilder-core.TurnContext.isFromStreamingConnection
      - botbuilder-core.TurnContext.onDeleteActivity
      - botbuilder-core.TurnContext.onSendActivities
      - botbuilder-core.TurnContext.onUpdateActivity
      - botbuilder-core.TurnContext.removeMentionText
      - botbuilder-core.TurnContext.removeRecipientMention
      - botbuilder-core.TurnContext.responded
      - botbuilder-core.TurnContext.sendActivities
      - botbuilder-core.TurnContext.sendActivity
      - botbuilder-core.TurnContext.constructor
      - botbuilder-core.TurnContext.constructor_1
      - botbuilder-core.TurnContext.turnState
      - botbuilder-core.TurnContext.updateActivity
    langs:
      - typeScript
    type: class
    summary: >-
      Context object containing information cached for a single turn of
      conversation with a user.
    package: botbuilder-core
    remarks: >-
      This will typically be created by the adapter you're using and then passed
      to middleware and

      your bots logic.
  - uid: botbuilder-core.TurnContext.activity
    name: activity
    fullName: activity
    children: []
    langs:
      - typeScript
    type: property
    summary: The received activity.
    syntax:
      content: Activity activity
      return:
        type:
          - Activity
    package: botbuilder-core
    remarks: >-
      This example shows how to get the users trimmed utterance from the
      activity:


      ```JavaScript

      const utterance = (context.activity.text || '').trim();

      ```
  - uid: botbuilder-core.TurnContext.adapter
    name: adapter
    fullName: adapter
    children: []
    langs:
      - typeScript
    type: property
    summary: The adapter for this context.
    syntax:
      content: BotAdapter adapter
      return:
        type:
          - botbuilder-core.BotAdapter
    package: botbuilder-core
    remarks: >-
      This example shows how to send a `typing` activity directly using the
      adapter. This approach

      bypasses any middleware which sometimes has its advantages.  The calls to

      `getConversationReference()` and `applyConversationReference()` are needed
      to ensure that the

      outgoing activity is properly addressed:


      ```JavaScript

      // Send a typing indicator without going through an middleware listeners.

      const reference = TurnContext.getConversationReference(context.activity);

      const activity = TurnContext.applyConversationReference({ type: 'typing'
      }, reference);

      await context.adapter.sendActivities([activity]);

      ```
  - uid: botbuilder-core.TurnContext.applyConversationReference
    name: >-
      applyConversationReference(Partial<Activity>,
      Partial<ConversationReference>, boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates an activity with the delivery information from a conversation
      reference.
    syntax:
      content: >-
        static function applyConversationReference(activity: Partial<Activity>,
        reference: Partial<ConversationReference>, isIncoming: boolean)
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: Activity to copy delivery information to.
        - id: reference
          type:
            - Partial<ConversationReference>
          description: Conversation reference containing delivery information.
        - id: isIncoming
          type:
            - boolean
          description: >
            (Optional) flag indicating whether the activity is an incoming or
            outgoing activity. Defaults to `false` indicating the activity is
            outgoing.
      return:
        type:
          - Partial<Activity>
    package: botbuilder-core
    remarks: >-
      Calling this after [getConversationReference()](#getconversationreference)
      on an incoming

      activity will properly address the reply to a received activity.


      ```JavaScript

      // Send a typing indicator without going through a middleware listeners.

      const reference = TurnContext.getConversationReference(context.activity);

      const activity = TurnContext.applyConversationReference({ type: 'typing'
      }, reference);

      await context.adapter.sendActivities([activity]);

      ```
  - uid: botbuilder-core.TurnContext.deleteActivity
    name: deleteActivity(string | Partial<ConversationReference>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing activity.
    syntax:
      content: >-
        function deleteActivity(idOrReference: string |
        Partial<ConversationReference>)
      parameters:
        - id: idOrReference
          type:
            - string | Partial<ConversationReference>
          description: >
            ID or conversation of the activity being deleted. If an ID is
            specified the conversation reference information from the current
            request will be used to delete the activity.
      return:
        type:
          - Promise<void>
    package: botbuilder-core
    remarks: >-
      The `ConversationReference` for the activity being deleted will be routed
      through any registered

      [onDeleteActivity](#ondeleteactivity) handlers before being passed to
      `adapter.deleteActivity()`.


      ```JavaScript

      const matched = /approve (.*)/i.exec(context.activity.text);

      if (matched) {
         const savedId = await approveExpenseReport(matched[1]);
         await context.deleteActivity(savedId);
      }

      ```
  - uid: botbuilder-core.TurnContext.getConversationReference
    name: getConversationReference(Partial<Activity>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the conversation reference for an activity.
    syntax:
      content: 'static function getConversationReference(activity: Partial<Activity>)'
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: |
            The activity to copy the conversation reference from
      return:
        type:
          - Partial<ConversationReference>
    package: botbuilder-core
    remarks: >-
      This can be saved as a plain old JSON object and then later used to
      message the user

      proactively.


      ```JavaScript

      const reference = TurnContext.getConversationReference(context.request);

      ```
  - uid: botbuilder-core.TurnContext.getMentions
    name: getMentions(Partial<Activity>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns the mentions on an activity.
      ```JavaScript
      const mentions = TurnContext.getMentions(context.request);
      ```
    syntax:
      content: 'static function getMentions(activity: Partial<Activity>)'
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: The activity to alter the text on
      return:
        type:
          - 'Mention[]'
    package: botbuilder-core
  - uid: botbuilder-core.TurnContext.getReplyConversationReference
    name: 'getReplyConversationReference(Partial<Activity>, ResourceResponse)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a ConversationReference based on an outgoing Activity's
      ResourceResponse
    syntax:
      content: >-
        static function getReplyConversationReference(activity:
        Partial<Activity>, reply: ResourceResponse)
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: Activity from which to pull Conversation info
        - id: reply
          type:
            - ResourceResponse
          description: |
            ResourceResponse returned from sendActivity
      return:
        type:
          - Partial<ConversationReference>
    package: botbuilder-core
    remarks: >-
      This method can be used to create a ConversationReference that can be
      stored

      and used later to delete or update the activity.

      ```javascript

      var reply = await context.sendActivity('Hi');

      var reference =
      TurnContext.getReplyConversationReference(context.activity, reply);

      ```
  - uid: botbuilder-core.TurnContext.isFromStreamingConnection
    name: isFromStreamingConnection(Activity)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determine if the Activity was sent via an Http/Https connection or
      Streaming

      This can be determined by looking at the ServiceUrl property:
        (1) All channels that send messages via http/https are not streaming
        (2) Channels that send messages via streaming have a ServiceUrl that does not begin with http/https.
    syntax:
      content: 'static function isFromStreamingConnection(activity: Activity)'
      parameters:
        - id: activity
          type:
            - Activity
          description: |+

      return:
        type:
          - boolean
    package: botbuilder-core
  - uid: botbuilder-core.TurnContext.onDeleteActivity
    name: onDeleteActivity(DeleteActivityHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers a handler to be notified of, and potentially intercept, an
      activity being deleted.
    syntax:
      content: 'function onDeleteActivity(handler: DeleteActivityHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.DeleteActivityHandler
          description: >
            A function that will be called anytime
            [deleteActivity()](#deleteactivity) is called. The handler should
            call `next()` to continue deletion of the activity.
      return:
        type:
          - this
    package: botbuilder-core
    remarks: |-
      This example shows how to listen for and logs deleted activities.

      ```JavaScript
      context.onDeleteActivity(async (ctx, reference, next) => {
         // Delete activity
         await next();

         // Log delete
         logDelete(activity);
      });
      ```
  - uid: botbuilder-core.TurnContext.onSendActivities
    name: onSendActivities(SendActivitiesHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers a handler to be notified of, and potentially intercept, the
      sending of activities.
    syntax:
      content: 'function onSendActivities(handler: SendActivitiesHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.SendActivitiesHandler
          description: >
            A function that will be called anytime
            [sendActivity()](#sendactivity) is called. The handler should call
            `next()` to continue sending of the activities.
      return:
        type:
          - this
    package: botbuilder-core
    remarks: >-
      This example shows how to listen for and logs outgoing `message`
      activities.


      ```JavaScript

      context.onSendActivities(async (ctx, activities, next) => {
         // Deliver activities
         await next();

         // Log sent messages
         activities.filter(a => a.type === 'message').forEach(a => logSend(a));
      });

      ```
  - uid: botbuilder-core.TurnContext.onUpdateActivity
    name: onUpdateActivity(UpdateActivityHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers a handler to be notified of, and potentially intercept, an
      activity being updated.
    syntax:
      content: 'function onUpdateActivity(handler: UpdateActivityHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.UpdateActivityHandler
          description: >
            A function that will be called anytime
            [updateActivity()](#updateactivity) is called. The handler should
            call `next()` to continue sending of the replacement activity.
      return:
        type:
          - this
    package: botbuilder-core
    remarks: |-
      This example shows how to listen for and logs updated activities.

      ```JavaScript
      context.onUpdateActivity(async (ctx, activity, next) => {
         // Replace activity
         await next();

         // Log update
         logUpdate(activity);
      });
      ```
  - uid: botbuilder-core.TurnContext.removeMentionText
    name: 'removeMentionText(Partial<Activity>, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Remove any mention text for given id from the Activity.Text property.  For
      example, given the message

      "@echoBot Hi Bot", this will remove "@echoBot", leaving "Hi Bot".

      Typically this would be used to remove the mention text for the target
      recipient (the bot usually), though

      it could be called for each member.  For example:
        turnContext.Activity.RemoveMentionText(turnContext.Activity.Recipient.Id);

      The format of a mention Activity.Entity is dependent on the Channel.  But
      in all cases we

      expect the Mention.Text to contain the exact text for the user as it
      appears in

      Activity.Text.


      For example, Teams uses "<at>username</at>", whereas slack use
      "@username". It

      is expected that text is in Activity.Text and this method will remove that
      value from

      Activity.Text.


      ```JavaScript

      const updatedText = TurnContext.removeRecipientMention(context.request);

      ```
    syntax:
      content: >-
        static function removeMentionText(activity: Partial<Activity>, id:
        string)
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: The activity to alter the text on
        - id: id
          type:
            - string
          description: |
            The recipient id of the at mention
      return:
        type:
          - string
    package: botbuilder-core
  - uid: botbuilder-core.TurnContext.removeRecipientMention
    name: removeRecipientMention(Partial<Activity>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Rewrites the activity text without any at mention.

      Use with caution because this function is altering the text on the
      Activity.
    syntax:
      content: 'static function removeRecipientMention(activity: Partial<Activity>)'
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: |
            The activity to alter the text on
      return:
        type:
          - string
    package: botbuilder-core
    remarks: >-
      Some channels, for example Microsoft Teams, add at mention details into
      the text on a message activity.

      This can interfere with later processing. This is a helper function to
      remove the at mention.


      ```JavaScript

      const updatedText = TurnContext.removeRecipientMention(context.request);

      ```
  - uid: botbuilder-core.TurnContext.responded
    name: responded
    fullName: responded
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If `true` at least one response has been sent for the current turn of
      conversation.
    syntax:
      content: boolean responded
      return:
        type:
          - boolean
    package: botbuilder-core
    remarks: >-
      This is primarily useful for determining if a bot should run fallback
      routing logic:


      ```JavaScript

      await routeActivity(context);

      if (!context.responded) {
         await context.sendActivity(`I'm sorry. I didn't understand.`);
      }

      ```
  - uid: botbuilder-core.TurnContext.sendActivities
    name: 'sendActivities(Partial<Activity>[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sends a set of activities to the user. An array of responses from the
      server will be returned.
    syntax:
      content: 'function sendActivities(activities: Partial<Activity>[])'
      parameters:
        - id: activities
          type:
            - 'Partial<Activity>[]'
          description: |
            One or more activities to send to the user.
      return:
        type:
          - 'Promise<ResourceResponse[]>'
    package: botbuilder-core
    remarks: >-
      Prior to delivery, the activities will be updated with information from
      the `ConversationReference`

      for the contexts [activity](#activity) and if any activities `type` field
      hasn't been set it will be

      set to a type of `message`. The array of activities will then be routed
      through any [onSendActivities()](#onsendactivities)

      handlers before being passed to `adapter.sendActivities()`.


      ```JavaScript

      await context.sendActivities([
         { type: 'typing' },
         { type: 'delay', value: 2000 },
         { type: 'message', text: 'Hello... How are you?' }
      ]);

      ```
  - uid: botbuilder-core.TurnContext.sendActivity
    name: 'sendActivity(string | Partial<Activity>, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends a single activity or message to the user.
    syntax:
      content: >-
        function sendActivity(activityOrText: string | Partial<Activity>,
        speak?: string, inputHint?: string)
      parameters:
        - id: activityOrText
          type:
            - string | Partial<Activity>
          description: Activity or text of a message to send the user.
        - id: speak
          type:
            - string
          description: (Optional) SSML that should be spoken to the user for the message.
          optional: true
        - id: inputHint
          type:
            - string
          description: >
            (Optional) `InputHint` for the message sent to the user. Defaults to
            `acceptingInput`.
          optional: true
      return:
        type:
          - Promise<ResourceResponse | undefined>
    package: botbuilder-core
    remarks: >-
      This ultimately calls [sendActivities()](#sendactivites) and is provided
      as a convenience to

      make formating and sending individual activities easier.


      ```JavaScript

      await context.sendActivity(`Hello World`);

      ```
  - uid: botbuilder-core.TurnContext.constructor
    name: 'TurnContext(BotAdapter, Partial<Activity>)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new TurnContext instance.
    syntax:
      content: >-
        new TurnContext(adapterOrContext: BotAdapter, request:
        Partial<Activity>)
      parameters:
        - id: adapterOrContext
          type:
            - botbuilder-core.BotAdapter
          description: Adapter that constructed the context or a context object to clone.
        - id: request
          type:
            - Partial<Activity>
          description: |
            Request being processed.
    package: botbuilder-core
  - uid: botbuilder-core.TurnContext.constructor_1
    name: TurnContext(TurnContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new TurnContext instance.
    syntax:
      content: 'new TurnContext(adapterOrContext: TurnContext)'
      parameters:
        - id: adapterOrContext
          type:
            - botbuilder-core.TurnContext
          description: Adapter that constructed the context or a context object to clone.
    package: botbuilder-core
  - uid: botbuilder-core.TurnContext.turnState
    name: turnState
    fullName: turnState
    children: []
    langs:
      - typeScript
    type: property
    summary: Map of services and other values cached for the lifetime of the turn.
    syntax:
      content: 'Map<any, any> turnState'
      return:
        type:
          - 'Map<any, any>'
    package: botbuilder-core
    remarks: >-
      Middleware, other components, and services will typically use this to
      cache information

      that could be asked for by a bot multiple times during a turn. The bots
      logic is free to

      use this to pass information between its own components.


      ```JavaScript

      const cart = await loadUsersShoppingCart(context);

      context.turnState.set('cart', cart);

      ```


      > [!TIP]

      > For middleware and third party components, consider using a `Symbol()`
      for your cache key

      > to avoid potential naming collisions with the bots caching and other
      components.
  - uid: botbuilder-core.TurnContext.updateActivity
    name: updateActivity(Partial<Activity>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Replaces an existing activity.
    syntax:
      content: 'function updateActivity(activity: Partial<Activity>)'
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: >
            New replacement activity. The activity should already have it's ID
            information populated.
      return:
        type:
          - Promise<void>
    package: botbuilder-core
    remarks: >-
      The activity will be routed through any registered
      [onUpdateActivity](#onupdateactivity) handlers

      before being passed to `adapter.updateActivity()`.


      ```JavaScript

      const matched = /approve (.*)/i.exec(context.activity.text);

      if (matched) {
         const update = await approveExpenseReport(matched[1]);
         await context.updateActivity(update);
      }

      ```
references:
  - uid: botbuilder-core.BotAdapter
    name: BotAdapter
    spec.typeScript:
      - name: BotAdapter
        fullName: BotAdapter
        uid: botbuilder-core.BotAdapter
  - uid: botbuilder-core.TurnContext
    name: TurnContext
    spec.typeScript:
      - name: TurnContext
        fullName: TurnContext
        uid: botbuilder-core.TurnContext
  - uid: botbuilder-core.DeleteActivityHandler
    name: DeleteActivityHandler
    spec.typeScript:
      - name: DeleteActivityHandler
        fullName: DeleteActivityHandler
        uid: botbuilder-core.DeleteActivityHandler
  - uid: botbuilder-core.SendActivitiesHandler
    name: SendActivitiesHandler
    spec.typeScript:
      - name: SendActivitiesHandler
        fullName: SendActivitiesHandler
        uid: botbuilder-core.SendActivitiesHandler
  - uid: botbuilder-core.UpdateActivityHandler
    name: UpdateActivityHandler
    spec.typeScript:
      - name: UpdateActivityHandler
        fullName: UpdateActivityHandler
        uid: botbuilder-core.UpdateActivityHandler
