### YamlMime:UniversalReference
items:
  - uid: botbuilder-lg.Templates
    name: Templates
    fullName: Templates
    children:
      - botbuilder-lg.Templates.addTemplate
      - botbuilder-lg.Templates.allDiagnostics
      - botbuilder-lg.Templates.allTemplates
      - botbuilder-lg.Templates.analyzeTemplate
      - botbuilder-lg.Templates.content
      - botbuilder-lg.Templates.deleteTemplate
      - botbuilder-lg.Templates.diagnostics
      - botbuilder-lg.Templates.evaluate
      - botbuilder-lg.Templates.evaluateText
      - botbuilder-lg.Templates.expandTemplate
      - botbuilder-lg.Templates.expressionParser
      - botbuilder-lg.Templates.id
      - botbuilder-lg.Templates.importResolver
      - botbuilder-lg.Templates.imports
      - botbuilder-lg.Templates.options
      - botbuilder-lg.Templates.parseFile
      - botbuilder-lg.Templates.parseText
      - botbuilder-lg.Templates.push
      - botbuilder-lg.Templates.references
      - botbuilder-lg.Templates.strictMode
      - botbuilder-lg.Templates.constructor
      - botbuilder-lg.Templates.toArray
      - botbuilder-lg.Templates.toString
      - botbuilder-lg.Templates.updateTemplate
    langs:
      - typeScript
    type: class
    summary: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.addTemplate
    name: 'addTemplate(string, string[], string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a new template and return LG file.
    syntax:
      content: >-
        function addTemplate(templateName: string, parameters: string[],
        templateBody: string)
      parameters:
        - id: templateName
          type:
            - string
          description: new template name.
        - id: parameters
          type:
            - 'string[]'
          description: new params.
        - id: templateBody
          type:
            - string
          description: new  template body.
      return:
        type:
          - botbuilder-lg.Templates
        description: new lg file.
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.allDiagnostics
    name: allDiagnostics
    fullName: allDiagnostics
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'allDiagnostics: Diagnostic[]'
      return:
        type:
          - 'botbuilder-lg.Diagnostic[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.allTemplates
    name: allTemplates
    fullName: allTemplates
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'allTemplates: Template[]'
      return:
        type:
          - 'botbuilder-lg.Template[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.analyzeTemplate
    name: analyzeTemplate(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function analyzeTemplate(templateName: string)'
      parameters:
        - id: templateName
          type:
            - string
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.content
    name: content
    fullName: content
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'content: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.deleteTemplate
    name: deleteTemplate(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete an exist template.
    syntax:
      content: 'function deleteTemplate(templateName: string)'
      parameters:
        - id: templateName
          type:
            - string
          description: which template should delete.
      return:
        type:
          - botbuilder-lg.Templates
        description: return the new lg file.
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.diagnostics
    name: diagnostics
    fullName: diagnostics
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'diagnostics: Diagnostic[]'
      return:
        type:
          - 'botbuilder-lg.Diagnostic[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.evaluate
    name: 'evaluate(string, object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function evaluate(templateName: string, scope?: object)'
      parameters:
        - id: templateName
          type:
            - string
          description: ''
        - id: scope
          type:
            - object
          description: ''
          optional: true
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.evaluateText
    name: 'evaluateText(string, object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function evaluateText(inlineStr: string, scope?: object)'
      parameters:
        - id: inlineStr
          type:
            - string
          description: ''
        - id: scope
          type:
            - object
          description: ''
          optional: true
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.expandTemplate
    name: 'expandTemplate(string, object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function expandTemplate(templateName: string, scope?: object)'
      parameters:
        - id: templateName
          type:
            - string
          description: ''
        - id: scope
          type:
            - object
          description: ''
          optional: true
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.expressionParser
    name: expressionParser
    fullName: expressionParser
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'expressionParser: ExpressionParser'
      return:
        type:
          - ExpressionParser
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'id: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.importResolver
    name: importResolver
    fullName: importResolver
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'importResolver: ImportResolverDelegate'
      return:
        type:
          - botbuilder-lg.ImportResolverDelegate
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.imports
    name: imports
    fullName: imports
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'imports: TemplateImport[]'
      return:
        type:
          - 'botbuilder-lg.TemplateImport[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.options
    name: options
    fullName: options
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'options: string[]'
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.parseFile
    name: 'parseFile(string, ImportResolverDelegate, ExpressionParser)'
    children: []
    type: method
    langs:
      - typeScript
    summary: parse a file and return LG file.
    syntax:
      content: >-
        static function parseFile(filePath: string, importResolver?:
        ImportResolverDelegate, expressionParser?: ExpressionParser)
      parameters:
        - id: filePath
          type:
            - string
          description: LG absolute file path..
        - id: importResolver
          type:
            - botbuilder-lg.ImportResolverDelegate
          description: resolver to resolve LG import id to template text.
          optional: true
        - id: expressionParser
          type:
            - ExpressionParser
          description: Expression parser for evaluating expressions.
          optional: true
      return:
        type:
          - botbuilder-lg.Templates
        description: new lg file.
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.parseText
    name: 'parseText(string, string, ImportResolverDelegate, ExpressionParser)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Parser to turn lg content into a Templates.
    syntax:
      content: >-
        static function parseText(content: string, id?: string, importResolver?:
        ImportResolverDelegate, expressionParser?: ExpressionParser)
      parameters:
        - id: content
          type:
            - string
          description: text content contains lg templates.
        - id: id
          type:
            - string
          description: >-
            id is the identifier of content. If importResolver is undefined, id
            must be a full path string.
          optional: true
        - id: importResolver
          type:
            - botbuilder-lg.ImportResolverDelegate
          description: resolver to resolve LG import id to template text.
          optional: true
        - id: expressionParser
          type:
            - ExpressionParser
          description: Expression parser for evaluating expressions.
          optional: true
      return:
        type:
          - botbuilder-lg.Templates
        description: entity.
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.push
    name: 'push(Template[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Appends 1 or more templates to the collection.
    syntax:
      content: 'function push(args: Template[])'
      parameters:
        - id: args
          type:
            - 'botbuilder-lg.Template[]'
          description: |
            List of templates to add.
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.references
    name: references
    fullName: references
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'references: Templates[]'
      return:
        type:
          - 'botbuilder-lg.Templates[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.strictMode
    name: strictMode
    fullName: strictMode
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'strictMode: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.constructor
    name: >-
      Templates(Template[], TemplateImport[], Diagnostic[], Templates[], string,
      string, ExpressionParser, ImportResolverDelegate, string[])
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new Templates(items?: Template[], imports?: TemplateImport[],
        diagnostics?: Diagnostic[], references?: Templates[], content?: string,
        id?: string, expressionParser?: ExpressionParser,
        importResolverDelegate?: ImportResolverDelegate, options?: string[])
      parameters:
        - id: items
          type:
            - 'botbuilder-lg.Template[]'
          description: ''
          optional: true
        - id: imports
          type:
            - 'botbuilder-lg.TemplateImport[]'
          description: ''
          optional: true
        - id: diagnostics
          type:
            - 'botbuilder-lg.Diagnostic[]'
          description: ''
          optional: true
        - id: references
          type:
            - 'botbuilder-lg.Templates[]'
          description: ''
          optional: true
        - id: content
          type:
            - string
          description: ''
          optional: true
        - id: id
          type:
            - string
          description: ''
          optional: true
        - id: expressionParser
          type:
            - ExpressionParser
          description: ''
          optional: true
        - id: importResolverDelegate
          type:
            - botbuilder-lg.ImportResolverDelegate
          description: ''
          optional: true
        - id: options
          type:
            - 'string[]'
          description: ''
          optional: true
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.toArray
    name: toArray()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a reference to the internal list of collection templates.
    syntax:
      content: function toArray()
      parameters: []
      return:
        type:
          - 'botbuilder-lg.Template[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.toString
    name: toString()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Templates.updateTemplate
    name: 'updateTemplate(string, string, string[], string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update a template and return LG file.
    syntax:
      content: >-
        function updateTemplate(templateName: string, newTemplateName: string,
        parameters: string[], templateBody: string)
      parameters:
        - id: templateName
          type:
            - string
          description: new template name.
        - id: newTemplateName
          type:
            - string
          description: ''
        - id: parameters
          type:
            - 'string[]'
          description: new params.
        - id: templateBody
          type:
            - string
          description: new  template body.
      return:
        type:
          - botbuilder-lg.Templates
        description: new lg file.
    package: botbuilder-lg
references:
  - uid: 'botbuilder-lg.Template[]'
    name: 'Template[]'
    spec.typeScript:
      - name: Template
        fullName: Template
        uid: botbuilder-lg.Template
      - name: '[]'
        fullName: '[]'
  - uid: 'botbuilder-lg.TemplateImport[]'
    name: 'TemplateImport[]'
    spec.typeScript:
      - name: TemplateImport
        fullName: TemplateImport
        uid: botbuilder-lg.TemplateImport
      - name: '[]'
        fullName: '[]'
  - uid: 'botbuilder-lg.Diagnostic[]'
    name: 'Diagnostic[]'
    spec.typeScript:
      - name: Diagnostic
        fullName: Diagnostic
        uid: botbuilder-lg.Diagnostic
      - name: '[]'
        fullName: '[]'
  - uid: 'botbuilder-lg.Templates[]'
    name: 'Templates[]'
    spec.typeScript:
      - name: Templates
        fullName: Templates
        uid: botbuilder-lg.Templates
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder-lg.ImportResolverDelegate
    name: ImportResolverDelegate
    spec.typeScript:
      - name: ImportResolverDelegate
        fullName: ImportResolverDelegate
        uid: botbuilder-lg.ImportResolverDelegate
  - uid: botbuilder-lg.Templates
    name: Templates
    spec.typeScript:
      - name: Templates
        fullName: Templates
        uid: botbuilder-lg.Templates
  - uid: botbuilder-lg.AnalyzerResult
    name: AnalyzerResult
    spec.typeScript:
      - name: AnalyzerResult
        fullName: AnalyzerResult
        uid: botbuilder-lg.AnalyzerResult
