### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs-adaptive.MultiLanguageGenerator
    name: MultiLanguageGenerator
    fullName: MultiLanguageGenerator
    children:
      - botbuilder-dialogs-adaptive.MultiLanguageGenerator.generate
      - botbuilder-dialogs-adaptive.MultiLanguageGenerator.languageGenerators
      - botbuilder-dialogs-adaptive.MultiLanguageGenerator.languagePolicy
      - botbuilder-dialogs-adaptive.MultiLanguageGenerator.constructor
      - botbuilder-dialogs-adaptive.MultiLanguageGenerator.tryGetGenerator
    langs:
      - typeScript
    type: class
    summary: >-
      ILanguageGenerator which uses implements a map of
      locale->ILanguageGenerator for the locale

      and has a policy which controls fallback (try en-us -> en -> default).
    extends:
      name: botbuilder-dialogs-adaptive.MultiLanguageGeneratorBase
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.MultiLanguageGenerator.generate
    name: 'generate(TurnContext, string, object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generate(turnContext: TurnContext, template: string, data:
        object)
      parameters:
        - id: turnContext
          type:
            - TurnContext
          description: ''
        - id: template
          type:
            - string
          description: ''
        - id: data
          type:
            - object
          description: ''
      return:
        type:
          - Promise<string>
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.MultiLanguageGenerator.languageGenerators
    name: languageGenerators
    fullName: languageGenerators
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'languageGenerators: Map<string, LanguageGenerator>'
      return:
        type:
          - 'Map<string, botbuilder-dialogs-adaptive.LanguageGenerator>'
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.MultiLanguageGenerator.languagePolicy
    name: languagePolicy
    fullName: languagePolicy
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'languagePolicy: any'
      return:
        type:
          - any
        description: ''
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.MultiLanguageGenerator.constructor
    name: MultiLanguageGenerator()
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: new MultiLanguageGenerator()
      parameters: []
    package: botbuilder-dialogs-adaptive
  - uid: botbuilder-dialogs-adaptive.MultiLanguageGenerator.tryGetGenerator
    name: 'tryGetGenerator(TurnContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryGetGenerator(context: TurnContext, locale: string)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: ''
        - id: locale
          type:
            - string
          description: ''
      return:
        type:
          - Object
        description: ''
    package: botbuilder-dialogs-adaptive
references:
  - uid: botbuilder-dialogs-adaptive.MultiLanguageGeneratorBase
    name: MultiLanguageGeneratorBase
    spec.typeScript:
      - name: MultiLanguageGeneratorBase
        fullName: MultiLanguageGeneratorBase
        uid: botbuilder-dialogs-adaptive.MultiLanguageGeneratorBase
  - uid: 'Map<string, botbuilder-dialogs-adaptive.LanguageGenerator>'
    name: LanguageGenerator>
    spec.typeScript:
      - name: 'Map<string, '
        fullName: 'Map<string, '
      - name: LanguageGenerator
        fullName: LanguageGenerator
        uid: botbuilder-dialogs-adaptive.LanguageGenerator
      - name: '>'
        fullName: '>'
